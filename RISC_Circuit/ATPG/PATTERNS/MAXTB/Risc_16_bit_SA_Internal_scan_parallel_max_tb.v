// MAX TB Test Protocol File, generated by MAX TB Version U-2022.12-SP7
// Sat Apr 13 10:21:07 2024
// Module under test: Risc_16_bit
// Generated from original STIL file : "PATTERNS/STIL/Risc_16_bit_SA_Internal_scan_500.stil.gz"
// STIL file version: "1.0"
// Enhanced Runtime Version (with test data programmability): use <sim_exec> +tmax_help for available runtime options
// Simulation mode: default parallel simulation

`define TDATA_FILE "/home/vlsilab/sagar_harsh_soham/RISC/ATPG/PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb.dat"
`ifndef XTB_DUT_HIER 
  `define XTB_DUT_HIER dut
`endif
`timescale 1ns/1ns

// OPCODE DEFINITION
`define SetLastReseed 0
`define EndPat 1
`define IncPat 2
`define SetPat 3
`define WFTStmt 4
`define ConditionStmt 5
`define VectorStmt 6
`define FixedStmt 7
`define GenLoopStmt 8
`define EndGenLoopStmt 9
`define GenTestSetupStmt 10
`define EndGenTestSetupStmt 11
`define SetForceSI 12
`define SetValidStrobe 13
`define AnnotationStmt 14
`define SetWPack 15
`define SetRPack 16
`define multiclock_captureStmt 17
`define allclock_captureStmt 18
`define allclock_launchStmt 19
`define allclock_launch_captureStmt 20
`define load_unloadStmt 21
`define test_setupStmt 22

// SIGS DEFINITION
`define clk 0
`define TEST_SI1 1
`define TEST_SI2 2
`define TEST_SI3 3
`define TEST_SI4 4
`define TEST_SE 5
`define scan_clk 6
`define SCAN_MODE 7
`define pll_bypass_2 8
`define pll_reset 9
`define test_si5 10
`define test_si6 11
`define test_si7 12
`define test_si8 13
`define test_si9 14
`define test_si10 15
`define test_si11 16
`define test_si12 17
`define test_si13 18
`define test_si14 19
`define test_si15 20
`define test_si16 21
`define test_si17 22
`define test_si18 23
`define test_si19 24
`define test_si20 25
`define test_si21 26
`define test_si22 27
`define test_si23 28
`define test_si24 29
`define test_si25 30
`define test_si26 31
`define test_si27 32
`define test_si28 33
`define test_si29 34
`define test_si30 35
`define test_si31 36
`define test_si32 37
`define test_si33 38
`define test_si34 39
`define test_si35 40
`define test_si36 41
`define test_si37 42
`define test_si38 43
`define test_si39 44
`define test_si40 45
`define test_si41 46
`define test_si42 47
`define test_si43 48
`define test_si44 49
`define test_si45 50
`define test_si46 51
`define test_si47 52
`define TEST_SO1 53
`define TEST_SO2 54
`define TEST_SO3 55
`define TEST_SO4 56
`define test_so5 57
`define test_so6 58
`define test_so7 59
`define test_so8 60
`define test_so9 61
`define test_so10 62
`define test_so11 63
`define test_so12 64
`define test_so13 65
`define test_so14 66
`define test_so15 67
`define test_so16 68
`define test_so17 69
`define test_so18 70
`define test_so19 71
`define test_so20 72
`define test_so21 73
`define test_so22 74
`define test_so23 75
`define test_so24 76
`define test_so25 77
`define test_so26 78
`define test_so27 79
`define test_so28 80
`define test_so29 81
`define test_so30 82
`define test_so31 83
`define test_so32 84
`define test_so33 85
`define test_so34 86
`define test_so35 87
`define test_so36 88
`define test_so37 89
`define test_so38 90
`define test_so39 91
`define test_so40 92
`define test_so41 93
`define test_so42 94
`define test_so43 95
`define test_so44 96
`define test_so45 97
`define test_so46 98
`define test_so47 99
`define _pi 100
`define all_inputs 101
`define _po 102
`define _si 103
`define all_outputs 104
`define _clk 105
`define _so 106

// WFTS DEFINITION
`define _multiclock_capture_WFT_ 0
`define _allclock_capture_WFT_ 1
`define _allclock_launch_WFT_ 2
`define _allclock_launch_capture_WFT_ 3
`define _default_WFT_ 4
`define MAX_PART 0

`define MAXTB_HEADER " MAX TB Version U-2022.12-SP7\n Test Protocol File generated from original file \"PATTERNS/STIL/Risc_16_bit_SA_Internal_scan_500.stil.gz\"\n STIL file version: 1.0"
`define MAXTB_H_S "#############################################################################"


module /* maxtb */ Risc_16_bit_test ();
   parameter NSTMTS = 23; // number of all stmts
   parameter DFSHIFTS = 0; // (default) number of serial shifts in parallel scan mode
   parameter NAMELENGTH = 200; // max length of names reported in fails
   parameter SC_NAMELENGTH = 43; // max length of scan cell names reported in fails
   parameter FILELENGTH = 1024; // max length for file names 
   parameter MAXCHLEN = 6, NCHAINS = 47;
   parameter NINPUTS = 53, NOUTPUTS = 47, CUM_WIDTH=396;
   parameter NSIS = 47, NSOUTS = 47;
   parameter WFT_IDS = 5, SIG_IDS = 107, SIG_IDS_W = 7, MAX_WIDTH = 53, MAX_SIGW = 1;
   parameter PARSERINC = 6; 
   parameter SYNC_LATENCY = 3; 
   parameter PRTIME = 0.000000; 
   parameter PSTIME = 0.000000; 
   parameter MDEPTH = 8463; 
   integer xtb_sim_mode; // simulation modes: xtb_sim_mode=0 -> serial, xtb_sim_mode=1 -> parallel (default);

   integer f_part, l_part;
   integer nbfails, abit, cbit;
   integer prev_error; // flag for tracking displayed error banner
   integer loads;        // number of load_unloads for current pattern
   integer prev_pat;     // previous pattern number;
   integer rep_pat; // report pattern progress every Nth pattern
   integer verbose;      // message verbosity level
   integer debug;      // enable debug level
   integer test_setup_runs; // counts the number of executed test_setups
   integer test_setup_only_once; // flag to trigger only one execution of test_setup
   integer data_i, n, cur_pat, start_pat, end_pat, last_pat, total_pats, csci, fsci, cur_stmt, n_pat_sim;
   integer v_count, v_count_per_pat;  // track the cycle count and cycle/pattern count (helpful for the simulator GUI)
   integer v_count_per_stmt;  // track the cycle count per statement (procedure or macro)
   integer SSHIFTS;
   integer diagf, diagm;
   integer sertmg;
   integer test_setup_mode; 
   reg test_setup_done; 
   integer the_wft_id, wft_id_s;
   integer ser_pats;
   integer first_pat;
   event start_part, end_part;
   event error_ev;
   `define SIGCODE 53194
   `define NBRTOPS 12
   integer csim_op;
   reg [32*8:1] RT_OPS [0:`NBRTOPS];
   integer      rt_ops [0:`NBRTOPS-1];
   integer      tdfm;
   integer lp_addr, lp_count, lp_max;
   reg [0:(8*FILELENGTH)-1] TDATA_FILE;

   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] ALLINSIGS, ALLOUTSIGS;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPINSIGS_V,TMPINSIGS_T,TMPINSIGS_V_S,TMPINSIGS_T_S;
   reg [MAX_SIGW*(NINPUTS+NOUTPUTS)-1:0] TMPOUTSIGS_V,TMPOUTSIGS_T,TMPOUTSIGS_V_S,TMPOUTSIGS_T_S;
   reg [NINPUTS+NOUTPUTS-1:0] ALLINSIGIDS, ALLOUTSIGIDS, ALLINSIGIDS_S, ALLOUTSIGIDS_S;
   reg [NSTMTS-1:0] opcode, popcode;
   event force_scells;
   event strobe_scells;
   event release_scells;
   reg [135:0] memel, memall [1:MDEPTH];
   reg [0:(8*NAMELENGTH)-1] CH_NAMES [0:NCHAINS-1];
   reg [0:(8*NAMELENGTH)-1] CH_PINS [0:NCHAINS-1];
   reg [0:8*(SC_NAMELENGTH-1)] SC_NAMES[0:(NCHAINS*MAXCHLEN)-1];
   reg [0:MAXCHLEN-1] LOD, LOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNL, UNLOAD[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] UNLM;
   reg [0:MAXCHLEN-1] SERIALM;
   reg [0:MAXCHLEN-1] CH_INPINV[0:NCHAINS-1], CH_OUTINV[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] CT_OUTINV[0:NCHAINS-1];
   wire [0:NCHAINS-1] SCANOUT;
   reg [0:MAXCHLEN-1] CHOUT, CHAINOUT[0:NCHAINS-1];
   reg [0:MAXCHLEN-1] CHAINOUT0,  CHAINOUT1,  CHAINOUT2,  CHAINOUT3,  CHAINOUT4,  CHAINOUT5,  CHAINOUT6,  CHAINOUT7,  CHAINOUT8,  CHAINOUT9,  CHAINOUT10,  CHAINOUT11,  CHAINOUT12,  CHAINOUT13,  CHAINOUT14,  CHAINOUT15,  CHAINOUT16,  CHAINOUT17,  CHAINOUT18,  CHAINOUT19,  CHAINOUT20,  CHAINOUT21,  CHAINOUT22,  CHAINOUT23,  CHAINOUT24,  CHAINOUT25,  CHAINOUT26,  CHAINOUT27,  CHAINOUT28,  CHAINOUT29,  CHAINOUT30,  CHAINOUT31,  CHAINOUT32,  CHAINOUT33,  CHAINOUT34,  CHAINOUT35,  CHAINOUT36,  CHAINOUT37,  CHAINOUT38,  CHAINOUT39,  CHAINOUT40,  CHAINOUT41,  CHAINOUT42,  CHAINOUT43,  CHAINOUT44,  CHAINOUT45,  CHAINOUT46;
   reg [0:MAXCHLEN-1] LOD0,  LOD1,  LOD2,  LOD3,  LOD4,  LOD5,  LOD6,  LOD7,  LOD8,  LOD9,  LOD10,  LOD11,  LOD12,  LOD13,  LOD14,  LOD15,  LOD16,  LOD17,  LOD18,  LOD19,  LOD20,  LOD21,  LOD22,  LOD23,  LOD24,  LOD25,  LOD26,  LOD27,  LOD28,  LOD29,  LOD30,  LOD31,  LOD32,  LOD33,  LOD34,  LOD35,  LOD36,  LOD37,  LOD38,  LOD39,  LOD40,  LOD41,  LOD42,  LOD43,  LOD44,  LOD45,  LOD46;
   integer set_last_reseed;
   reg strobe_en;
   reg [SIG_IDS-1:0] sid_args ;
   reg [2*CUM_WIDTH-1:0] sval_args;
   reg [6:0] the_sids [0:SIG_IDS-1];
   reg [8*NAMELENGTH-1:0]  SignalIDName [0:106];
   reg [2:0]  SignalIDType [0:106];
   reg [5:0]  SignalIDWidth [0:106];
   reg [(8*NAMELENGTH-1):0]  WFTIDName [0:4];
   reg [0:(8*FILELENGTH)-1] diag_file;
   reg [0:(8*NAMELENGTH-1)] StmtNames [0:NSTMTS];

   reg clk_con ;
   reg TEST_SI1_con ;
   reg TEST_SI2_con ;
   reg TEST_SI3_con ;
   reg TEST_SI4_con ;
   reg TEST_SE_con ;
   reg scan_clk_con ;
   reg SCAN_MODE_con ;
   reg pll_bypass_2_con ;
   reg pll_reset_con ;
   reg test_si5_con ;
   reg test_si6_con ;
   reg test_si7_con ;
   reg test_si8_con ;
   reg test_si9_con ;
   reg test_si10_con ;
   reg test_si11_con ;
   reg test_si12_con ;
   reg test_si13_con ;
   reg test_si14_con ;
   reg test_si15_con ;
   reg test_si16_con ;
   reg test_si17_con ;
   reg test_si18_con ;
   reg test_si19_con ;
   reg test_si20_con ;
   reg test_si21_con ;
   reg test_si22_con ;
   reg test_si23_con ;
   reg test_si24_con ;
   reg test_si25_con ;
   reg test_si26_con ;
   reg test_si27_con ;
   reg test_si28_con ;
   reg test_si29_con ;
   reg test_si30_con ;
   reg test_si31_con ;
   reg test_si32_con ;
   reg test_si33_con ;
   reg test_si34_con ;
   reg test_si35_con ;
   reg test_si36_con ;
   reg test_si37_con ;
   reg test_si38_con ;
   reg test_si39_con ;
   reg test_si40_con ;
   reg test_si41_con ;
   reg test_si42_con ;
   reg test_si43_con ;
   reg test_si44_con ;
   reg test_si45_con ;
   reg test_si46_con ;
   reg test_si47_con ;
   wire TEST_SO1_con ;
   wire TEST_SO2_con ;
   wire TEST_SO3_con ;
   wire TEST_SO4_con ;
   wire test_so5_con ;
   wire test_so6_con ;
   wire test_so7_con ;
   wire test_so8_con ;
   wire test_so9_con ;
   wire test_so10_con ;
   wire test_so11_con ;
   wire test_so12_con ;
   wire test_so13_con ;
   wire test_so14_con ;
   wire test_so15_con ;
   wire test_so16_con ;
   wire test_so17_con ;
   wire test_so18_con ;
   wire test_so19_con ;
   wire test_so20_con ;
   wire test_so21_con ;
   wire test_so22_con ;
   wire test_so23_con ;
   wire test_so24_con ;
   wire test_so25_con ;
   wire test_so26_con ;
   wire test_so27_con ;
   wire test_so28_con ;
   wire test_so29_con ;
   wire test_so30_con ;
   wire test_so31_con ;
   wire test_so32_con ;
   wire test_so33_con ;
   wire test_so34_con ;
   wire test_so35_con ;
   wire test_so36_con ;
   wire test_so37_con ;
   wire test_so38_con ;
   wire test_so39_con ;
   wire test_so40_con ;
   wire test_so41_con ;
   wire test_so42_con ;
   wire test_so43_con ;
   wire test_so44_con ;
   wire test_so45_con ;
   wire test_so46_con ;
   wire test_so47_con ;

   wire [0:(8*NAMELENGTH-1)] cur_StmtName;
   assign cur_StmtName = StmtNames[cur_stmt] ;


   Risc_16_bit dut ( 
     .clk ( clk_con ),
     .TEST_SI1 ( TEST_SI1_con ),
     .TEST_SI2 ( TEST_SI2_con ),
     .TEST_SI3 ( TEST_SI3_con ),
     .TEST_SI4 ( TEST_SI4_con ),
     .TEST_SE ( TEST_SE_con ),
     .scan_clk ( scan_clk_con ),
     .SCAN_MODE ( SCAN_MODE_con ),
     .pll_bypass_2 ( pll_bypass_2_con ),
     .pll_reset ( pll_reset_con ),
     .test_si5 ( test_si5_con ),
     .test_si6 ( test_si6_con ),
     .test_si7 ( test_si7_con ),
     .test_si8 ( test_si8_con ),
     .test_si9 ( test_si9_con ),
     .test_si10 ( test_si10_con ),
     .test_si11 ( test_si11_con ),
     .test_si12 ( test_si12_con ),
     .test_si13 ( test_si13_con ),
     .test_si14 ( test_si14_con ),
     .test_si15 ( test_si15_con ),
     .test_si16 ( test_si16_con ),
     .test_si17 ( test_si17_con ),
     .test_si18 ( test_si18_con ),
     .test_si19 ( test_si19_con ),
     .test_si20 ( test_si20_con ),
     .test_si21 ( test_si21_con ),
     .test_si22 ( test_si22_con ),
     .test_si23 ( test_si23_con ),
     .test_si24 ( test_si24_con ),
     .test_si25 ( test_si25_con ),
     .test_si26 ( test_si26_con ),
     .test_si27 ( test_si27_con ),
     .test_si28 ( test_si28_con ),
     .test_si29 ( test_si29_con ),
     .test_si30 ( test_si30_con ),
     .test_si31 ( test_si31_con ),
     .test_si32 ( test_si32_con ),
     .test_si33 ( test_si33_con ),
     .test_si34 ( test_si34_con ),
     .test_si35 ( test_si35_con ),
     .test_si36 ( test_si36_con ),
     .test_si37 ( test_si37_con ),
     .test_si38 ( test_si38_con ),
     .test_si39 ( test_si39_con ),
     .test_si40 ( test_si40_con ),
     .test_si41 ( test_si41_con ),
     .test_si42 ( test_si42_con ),
     .test_si43 ( test_si43_con ),
     .test_si44 ( test_si44_con ),
     .test_si45 ( test_si45_con ),
     .test_si46 ( test_si46_con ),
     .test_si47 ( test_si47_con ),
     .TEST_SO1 ( TEST_SO1_con ),
     .TEST_SO2 ( TEST_SO2_con ),
     .TEST_SO3 ( TEST_SO3_con ),
     .TEST_SO4 ( TEST_SO4_con ),
     .test_so5 ( test_so5_con ),
     .test_so6 ( test_so6_con ),
     .test_so7 ( test_so7_con ),
     .test_so8 ( test_so8_con ),
     .test_so9 ( test_so9_con ),
     .test_so10 ( test_so10_con ),
     .test_so11 ( test_so11_con ),
     .test_so12 ( test_so12_con ),
     .test_so13 ( test_so13_con ),
     .test_so14 ( test_so14_con ),
     .test_so15 ( test_so15_con ),
     .test_so16 ( test_so16_con ),
     .test_so17 ( test_so17_con ),
     .test_so18 ( test_so18_con ),
     .test_so19 ( test_so19_con ),
     .test_so20 ( test_so20_con ),
     .test_so21 ( test_so21_con ),
     .test_so22 ( test_so22_con ),
     .test_so23 ( test_so23_con ),
     .test_so24 ( test_so24_con ),
     .test_so25 ( test_so25_con ),
     .test_so26 ( test_so26_con ),
     .test_so27 ( test_so27_con ),
     .test_so28 ( test_so28_con ),
     .test_so29 ( test_so29_con ),
     .test_so30 ( test_so30_con ),
     .test_so31 ( test_so31_con ),
     .test_so32 ( test_so32_con ),
     .test_so33 ( test_so33_con ),
     .test_so34 ( test_so34_con ),
     .test_so35 ( test_so35_con ),
     .test_so36 ( test_so36_con ),
     .test_so37 ( test_so37_con ),
     .test_so38 ( test_so38_con ),
     .test_so39 ( test_so39_con ),
     .test_so40 ( test_so40_con ),
     .test_so41 ( test_so41_con ),
     .test_so42 ( test_so42_con ),
     .test_so43 ( test_so43_con ),
     .test_so44 ( test_so44_con ),
     .test_so45 ( test_so45_con ),
     .test_so46 ( test_so46_con ),
     .test_so47 ( test_so47_con )
  );


   task save_context;
     begin
       wft_id_s = the_wft_id;
       TMPINSIGS_V_S = TMPINSIGS_V;
       TMPOUTSIGS_V_S = TMPOUTSIGS_V;
       TMPINSIGS_T_S = TMPINSIGS_T;
       TMPOUTSIGS_T_S = TMPOUTSIGS_T;
       ALLOUTSIGIDS_S = ALLOUTSIGIDS;
       ALLINSIGIDS_S = ALLINSIGIDS;
     end
   endtask 

   task restore_context;
     begin
       the_wft_id = wft_id_s;
       TMPINSIGS_V = TMPINSIGS_V_S;
       TMPOUTSIGS_V = TMPOUTSIGS_V_S;
       TMPINSIGS_T = TMPINSIGS_T_S;
       TMPOUTSIGS_T = TMPOUTSIGS_T_S;
       ALLOUTSIGIDS = ALLOUTSIGIDS_S;
       ALLINSIGIDS = ALLINSIGIDS_S;
     end
   endtask 

   task resolve_signal;
     input reg [6:0] sid;
   begin
     if (SignalIDType[sid] != 3) the_sids[0] = sid;
     else begin
       case (sid)
         'd100: begin // _pi
                 the_sids[52] = 7; the_sids[51] = 5; the_sids[50] = 1; the_sids[49] = 2; the_sids[48] = 3; the_sids[47] = 4; the_sids[46] = 0; the_sids[45] = 8; the_sids[44] = 6; the_sids[43] = 9; the_sids[42] = 10; the_sids[41] = 11; the_sids[40] = 12; the_sids[39] = 13; the_sids[38] = 14; the_sids[37] = 15; the_sids[36] = 16; the_sids[35] = 17; the_sids[34] = 18; the_sids[33] = 19; the_sids[32] = 20; the_sids[31] = 21; the_sids[30] = 22; the_sids[29] = 23; the_sids[28] = 24; the_sids[27] = 25; the_sids[26] = 26; the_sids[25] = 27; the_sids[24] = 28; the_sids[23] = 29; the_sids[22] = 30; the_sids[21] = 31; the_sids[20] = 32; the_sids[19] = 33; the_sids[18] = 34; the_sids[17] = 35; the_sids[16] = 36; the_sids[15] = 37; the_sids[14] = 38; the_sids[13] = 39; the_sids[12] = 40; the_sids[11] = 41; the_sids[10] = 42; the_sids[9] = 43; the_sids[8] = 44; the_sids[7] = 45; the_sids[6] = 46; the_sids[5] = 47; the_sids[4] = 48; the_sids[3] = 49; the_sids[2] = 50; the_sids[1] = 51;
                 the_sids[0] = 52;
               end
         'd101: begin // all_inputs
                 the_sids[52] = 7; the_sids[51] = 5; the_sids[50] = 1; the_sids[49] = 2; the_sids[48] = 3; the_sids[47] = 4; the_sids[46] = 0; the_sids[45] = 8; the_sids[44] = 6; the_sids[43] = 9; the_sids[42] = 10; the_sids[41] = 11; the_sids[40] = 12; the_sids[39] = 13; the_sids[38] = 14; the_sids[37] = 15; the_sids[36] = 16; the_sids[35] = 17; the_sids[34] = 18; the_sids[33] = 19; the_sids[32] = 20; the_sids[31] = 21; the_sids[30] = 22; the_sids[29] = 23; the_sids[28] = 24; the_sids[27] = 25; the_sids[26] = 26; the_sids[25] = 27; the_sids[24] = 28; the_sids[23] = 29; the_sids[22] = 30; the_sids[21] = 31; the_sids[20] = 32; the_sids[19] = 33; the_sids[18] = 34; the_sids[17] = 35; the_sids[16] = 36; the_sids[15] = 37; the_sids[14] = 38; the_sids[13] = 39; the_sids[12] = 40; the_sids[11] = 41; the_sids[10] = 42; the_sids[9] = 43; the_sids[8] = 44; the_sids[7] = 45; the_sids[6] = 46; the_sids[5] = 47; the_sids[4] = 48; the_sids[3] = 49; the_sids[2] = 50; the_sids[1] = 51;
                 the_sids[0] = 52;
               end
         'd102: begin // _po
                 the_sids[46] = 53; the_sids[45] = 54; the_sids[44] = 55; the_sids[43] = 56; the_sids[42] = 57; the_sids[41] = 58; the_sids[40] = 59; the_sids[39] = 60; the_sids[38] = 61; the_sids[37] = 62; the_sids[36] = 63; the_sids[35] = 64; the_sids[34] = 65; the_sids[33] = 66; the_sids[32] = 67; the_sids[31] = 68; the_sids[30] = 69; the_sids[29] = 70; the_sids[28] = 71; the_sids[27] = 72; the_sids[26] = 73; the_sids[25] = 74; the_sids[24] = 75; the_sids[23] = 76; the_sids[22] = 77; the_sids[21] = 78; the_sids[20] = 79; the_sids[19] = 80; the_sids[18] = 81; the_sids[17] = 82; the_sids[16] = 83; the_sids[15] = 84; the_sids[14] = 85; the_sids[13] = 86; the_sids[12] = 87; the_sids[11] = 88; the_sids[10] = 89; the_sids[9] = 90; the_sids[8] = 91; the_sids[7] = 92; the_sids[6] = 93; the_sids[5] = 94; the_sids[4] = 95; the_sids[3] = 96; the_sids[2] = 97; the_sids[1] = 98;
                 the_sids[0] = 99;
               end
         'd103: begin // _si
                 the_sids[46] = 1; the_sids[45] = 2; the_sids[44] = 3; the_sids[43] = 4; the_sids[42] = 10; the_sids[41] = 11; the_sids[40] = 12; the_sids[39] = 13; the_sids[38] = 14; the_sids[37] = 15; the_sids[36] = 16; the_sids[35] = 17; the_sids[34] = 18; the_sids[33] = 19; the_sids[32] = 20; the_sids[31] = 21; the_sids[30] = 22; the_sids[29] = 23; the_sids[28] = 24; the_sids[27] = 25; the_sids[26] = 26; the_sids[25] = 27; the_sids[24] = 28; the_sids[23] = 29; the_sids[22] = 30; the_sids[21] = 31; the_sids[20] = 32; the_sids[19] = 33; the_sids[18] = 34; the_sids[17] = 35; the_sids[16] = 36; the_sids[15] = 37; the_sids[14] = 38; the_sids[13] = 39; the_sids[12] = 40; the_sids[11] = 41; the_sids[10] = 42; the_sids[9] = 43; the_sids[8] = 44; the_sids[7] = 45; the_sids[6] = 46; the_sids[5] = 47; the_sids[4] = 48; the_sids[3] = 49; the_sids[2] = 50; the_sids[1] = 51;
                 the_sids[0] = 52;
               end
         'd104: begin // all_outputs
                 the_sids[46] = 53; the_sids[45] = 54; the_sids[44] = 55; the_sids[43] = 56; the_sids[42] = 57; the_sids[41] = 58; the_sids[40] = 59; the_sids[39] = 60; the_sids[38] = 61; the_sids[37] = 62; the_sids[36] = 63; the_sids[35] = 64; the_sids[34] = 65; the_sids[33] = 66; the_sids[32] = 67; the_sids[31] = 68; the_sids[30] = 69; the_sids[29] = 70; the_sids[28] = 71; the_sids[27] = 72; the_sids[26] = 73; the_sids[25] = 74; the_sids[24] = 75; the_sids[23] = 76; the_sids[22] = 77; the_sids[21] = 78; the_sids[20] = 79; the_sids[19] = 80; the_sids[18] = 81; the_sids[17] = 82; the_sids[16] = 83; the_sids[15] = 84; the_sids[14] = 85; the_sids[13] = 86; the_sids[12] = 87; the_sids[11] = 88; the_sids[10] = 89; the_sids[9] = 90; the_sids[8] = 91; the_sids[7] = 92; the_sids[6] = 93; the_sids[5] = 94; the_sids[4] = 95; the_sids[3] = 96; the_sids[2] = 97; the_sids[1] = 98;
                 the_sids[0] = 99;
               end
         'd105: begin // _clk
                 the_sids[1] = 0;
                 the_sids[0] = 6;
               end
         'd106: begin // _so
                 the_sids[46] = 53; the_sids[45] = 54; the_sids[44] = 55; the_sids[43] = 56; the_sids[42] = 57; the_sids[41] = 58; the_sids[40] = 59; the_sids[39] = 60; the_sids[38] = 61; the_sids[37] = 62; the_sids[36] = 63; the_sids[35] = 64; the_sids[34] = 65; the_sids[33] = 66; the_sids[32] = 67; the_sids[31] = 68; the_sids[30] = 69; the_sids[29] = 70; the_sids[28] = 71; the_sids[27] = 72; the_sids[26] = 73; the_sids[25] = 74; the_sids[24] = 75; the_sids[23] = 76; the_sids[22] = 77; the_sids[21] = 78; the_sids[20] = 79; the_sids[19] = 80; the_sids[18] = 81; the_sids[17] = 82; the_sids[16] = 83; the_sids[15] = 84; the_sids[14] = 85; the_sids[13] = 86; the_sids[12] = 87; the_sids[11] = 88; the_sids[10] = 89; the_sids[9] = 90; the_sids[8] = 91; the_sids[7] = 92; the_sids[6] = 93; the_sids[5] = 94; the_sids[4] = 95; the_sids[3] = 96; the_sids[2] = 97; the_sids[1] = 98;
                 the_sids[0] = 99;
               end
          default: begin $display("\nXTB Error: unrecognized signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS); $finish; end
       endcase
     end
   end
   endtask

   task get_stb_sig;
     input reg [6:0] sid ;
     output reg [MAX_WIDTH-1:0] strsig;
   begin
     case (sid)
       'd53:	strsig[0:0] = 	TEST_SO1_con ;
       'd54:	strsig[0:0] = 	TEST_SO2_con ;
       'd55:	strsig[0:0] = 	TEST_SO3_con ;
       'd56:	strsig[0:0] = 	TEST_SO4_con ;
       'd57:	strsig[0:0] = 	test_so5_con ;
       'd58:	strsig[0:0] = 	test_so6_con ;
       'd59:	strsig[0:0] = 	test_so7_con ;
       'd60:	strsig[0:0] = 	test_so8_con ;
       'd61:	strsig[0:0] = 	test_so9_con ;
       'd62:	strsig[0:0] = 	test_so10_con ;
       'd63:	strsig[0:0] = 	test_so11_con ;
       'd64:	strsig[0:0] = 	test_so12_con ;
       'd65:	strsig[0:0] = 	test_so13_con ;
       'd66:	strsig[0:0] = 	test_so14_con ;
       'd67:	strsig[0:0] = 	test_so15_con ;
       'd68:	strsig[0:0] = 	test_so16_con ;
       'd69:	strsig[0:0] = 	test_so17_con ;
       'd70:	strsig[0:0] = 	test_so18_con ;
       'd71:	strsig[0:0] = 	test_so19_con ;
       'd72:	strsig[0:0] = 	test_so20_con ;
       'd73:	strsig[0:0] = 	test_so21_con ;
       'd74:	strsig[0:0] = 	test_so22_con ;
       'd75:	strsig[0:0] = 	test_so23_con ;
       'd76:	strsig[0:0] = 	test_so24_con ;
       'd77:	strsig[0:0] = 	test_so25_con ;
       'd78:	strsig[0:0] = 	test_so26_con ;
       'd79:	strsig[0:0] = 	test_so27_con ;
       'd80:	strsig[0:0] = 	test_so28_con ;
       'd81:	strsig[0:0] = 	test_so29_con ;
       'd82:	strsig[0:0] = 	test_so30_con ;
       'd83:	strsig[0:0] = 	test_so31_con ;
       'd84:	strsig[0:0] = 	test_so32_con ;
       'd85:	strsig[0:0] = 	test_so33_con ;
       'd86:	strsig[0:0] = 	test_so34_con ;
       'd87:	strsig[0:0] = 	test_so35_con ;
       'd88:	strsig[0:0] = 	test_so36_con ;
       'd89:	strsig[0:0] = 	test_so37_con ;
       'd90:	strsig[0:0] = 	test_so38_con ;
       'd91:	strsig[0:0] = 	test_so39_con ;
       'd92:	strsig[0:0] = 	test_so40_con ;
       'd93:	strsig[0:0] = 	test_so41_con ;
       'd94:	strsig[0:0] = 	test_so42_con ;
       'd95:	strsig[0:0] = 	test_so43_con ;
       'd96:	strsig[0:0] = 	test_so44_con ;
       'd97:	strsig[0:0] = 	test_so45_con ;
       'd98:	strsig[0:0] = 	test_so46_con ;
       'd99:	strsig[0:0] = 	test_so47_con ;
       default: begin $display("\nXTB Error: unrecognized output signal id %d. Exiting...",sid); $finish; end
     endcase
   end
   endtask

   task set_force_sig;
     input reg [SIG_IDS-1:0] sid ;
   begin
     case (sid)
       'd0: clk_con 	= ALLINSIGS[sid];
       'd1: TEST_SI1_con 	= ALLINSIGS[sid];
       'd2: TEST_SI2_con 	= ALLINSIGS[sid];
       'd3: TEST_SI3_con 	= ALLINSIGS[sid];
       'd4: TEST_SI4_con 	= ALLINSIGS[sid];
       'd5: TEST_SE_con 	= ALLINSIGS[sid];
       'd6: scan_clk_con 	= ALLINSIGS[sid];
       'd7: SCAN_MODE_con 	= ALLINSIGS[sid];
       'd8: pll_bypass_2_con 	= ALLINSIGS[sid];
       'd9: pll_reset_con 	= ALLINSIGS[sid];
       'd10: test_si5_con 	= ALLINSIGS[sid];
       'd11: test_si6_con 	= ALLINSIGS[sid];
       'd12: test_si7_con 	= ALLINSIGS[sid];
       'd13: test_si8_con 	= ALLINSIGS[sid];
       'd14: test_si9_con 	= ALLINSIGS[sid];
       'd15: test_si10_con 	= ALLINSIGS[sid];
       'd16: test_si11_con 	= ALLINSIGS[sid];
       'd17: test_si12_con 	= ALLINSIGS[sid];
       'd18: test_si13_con 	= ALLINSIGS[sid];
       'd19: test_si14_con 	= ALLINSIGS[sid];
       'd20: test_si15_con 	= ALLINSIGS[sid];
       'd21: test_si16_con 	= ALLINSIGS[sid];
       'd22: test_si17_con 	= ALLINSIGS[sid];
       'd23: test_si18_con 	= ALLINSIGS[sid];
       'd24: test_si19_con 	= ALLINSIGS[sid];
       'd25: test_si20_con 	= ALLINSIGS[sid];
       'd26: test_si21_con 	= ALLINSIGS[sid];
       'd27: test_si22_con 	= ALLINSIGS[sid];
       'd28: test_si23_con 	= ALLINSIGS[sid];
       'd29: test_si24_con 	= ALLINSIGS[sid];
       'd30: test_si25_con 	= ALLINSIGS[sid];
       'd31: test_si26_con 	= ALLINSIGS[sid];
       'd32: test_si27_con 	= ALLINSIGS[sid];
       'd33: test_si28_con 	= ALLINSIGS[sid];
       'd34: test_si29_con 	= ALLINSIGS[sid];
       'd35: test_si30_con 	= ALLINSIGS[sid];
       'd36: test_si31_con 	= ALLINSIGS[sid];
       'd37: test_si32_con 	= ALLINSIGS[sid];
       'd38: test_si33_con 	= ALLINSIGS[sid];
       'd39: test_si34_con 	= ALLINSIGS[sid];
       'd40: test_si35_con 	= ALLINSIGS[sid];
       'd41: test_si36_con 	= ALLINSIGS[sid];
       'd42: test_si37_con 	= ALLINSIGS[sid];
       'd43: test_si38_con 	= ALLINSIGS[sid];
       'd44: test_si39_con 	= ALLINSIGS[sid];
       'd45: test_si40_con 	= ALLINSIGS[sid];
       'd46: test_si41_con 	= ALLINSIGS[sid];
       'd47: test_si42_con 	= ALLINSIGS[sid];
       'd48: test_si43_con 	= ALLINSIGS[sid];
       'd49: test_si44_con 	= ALLINSIGS[sid];
       'd50: test_si45_con 	= ALLINSIGS[sid];
       'd51: test_si46_con 	= ALLINSIGS[sid];
       'd52: test_si47_con 	= ALLINSIGS[sid];
       default: begin $display("\nXTB Error: unrecognized (input) signal id %d (valid range is 0..%d). Exiting...",sid, SIG_IDS-1); $finish; end
     endcase
   end
   endtask 

   always  begin: force_sigs_p
     reg [SIG_IDS-1:0] sid; 
     reg [MAX_SIGW-1:0] sig;
     fork
        forever @(ALLINSIGS[0]) set_force_sig('d`clk );
        forever @(ALLINSIGS[1]) set_force_sig('d`TEST_SI1 );
        forever @(ALLINSIGS[2]) set_force_sig('d`TEST_SI2 );
        forever @(ALLINSIGS[3]) set_force_sig('d`TEST_SI3 );
        forever @(ALLINSIGS[4]) set_force_sig('d`TEST_SI4 );
        forever @(ALLINSIGS[5]) set_force_sig('d`TEST_SE );
        forever @(ALLINSIGS[6]) set_force_sig('d`scan_clk );
        forever @(ALLINSIGS[7]) set_force_sig('d`SCAN_MODE );
        forever @(ALLINSIGS[8]) set_force_sig('d`pll_bypass_2 );
        forever @(ALLINSIGS[9]) set_force_sig('d`pll_reset );
        forever @(ALLINSIGS[10]) set_force_sig('d`test_si5 );
        forever @(ALLINSIGS[11]) set_force_sig('d`test_si6 );
        forever @(ALLINSIGS[12]) set_force_sig('d`test_si7 );
        forever @(ALLINSIGS[13]) set_force_sig('d`test_si8 );
        forever @(ALLINSIGS[14]) set_force_sig('d`test_si9 );
        forever @(ALLINSIGS[15]) set_force_sig('d`test_si10 );
        forever @(ALLINSIGS[16]) set_force_sig('d`test_si11 );
        forever @(ALLINSIGS[17]) set_force_sig('d`test_si12 );
        forever @(ALLINSIGS[18]) set_force_sig('d`test_si13 );
        forever @(ALLINSIGS[19]) set_force_sig('d`test_si14 );
        forever @(ALLINSIGS[20]) set_force_sig('d`test_si15 );
        forever @(ALLINSIGS[21]) set_force_sig('d`test_si16 );
        forever @(ALLINSIGS[22]) set_force_sig('d`test_si17 );
        forever @(ALLINSIGS[23]) set_force_sig('d`test_si18 );
        forever @(ALLINSIGS[24]) set_force_sig('d`test_si19 );
        forever @(ALLINSIGS[25]) set_force_sig('d`test_si20 );
        forever @(ALLINSIGS[26]) set_force_sig('d`test_si21 );
        forever @(ALLINSIGS[27]) set_force_sig('d`test_si22 );
        forever @(ALLINSIGS[28]) set_force_sig('d`test_si23 );
        forever @(ALLINSIGS[29]) set_force_sig('d`test_si24 );
        forever @(ALLINSIGS[30]) set_force_sig('d`test_si25 );
        forever @(ALLINSIGS[31]) set_force_sig('d`test_si26 );
        forever @(ALLINSIGS[32]) set_force_sig('d`test_si27 );
        forever @(ALLINSIGS[33]) set_force_sig('d`test_si28 );
        forever @(ALLINSIGS[34]) set_force_sig('d`test_si29 );
        forever @(ALLINSIGS[35]) set_force_sig('d`test_si30 );
        forever @(ALLINSIGS[36]) set_force_sig('d`test_si31 );
        forever @(ALLINSIGS[37]) set_force_sig('d`test_si32 );
        forever @(ALLINSIGS[38]) set_force_sig('d`test_si33 );
        forever @(ALLINSIGS[39]) set_force_sig('d`test_si34 );
        forever @(ALLINSIGS[40]) set_force_sig('d`test_si35 );
        forever @(ALLINSIGS[41]) set_force_sig('d`test_si36 );
        forever @(ALLINSIGS[42]) set_force_sig('d`test_si37 );
        forever @(ALLINSIGS[43]) set_force_sig('d`test_si38 );
        forever @(ALLINSIGS[44]) set_force_sig('d`test_si39 );
        forever @(ALLINSIGS[45]) set_force_sig('d`test_si40 );
        forever @(ALLINSIGS[46]) set_force_sig('d`test_si41 );
        forever @(ALLINSIGS[47]) set_force_sig('d`test_si42 );
        forever @(ALLINSIGS[48]) set_force_sig('d`test_si43 );
        forever @(ALLINSIGS[49]) set_force_sig('d`test_si44 );
        forever @(ALLINSIGS[50]) set_force_sig('d`test_si45 );
        forever @(ALLINSIGS[51]) set_force_sig('d`test_si46 );
        forever @(ALLINSIGS[52]) set_force_sig('d`test_si47 );
     join
   end

   task measure_out_sig;
     input reg [SIG_IDS-1:0] sid ;
     input integer  stmtid;
     reg [MAX_WIDTH-1:0] xsig;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, abit, cpat;
   begin
     errshown = 0;
     cpat = cur_pat < 0 ? 0 : cur_pat;
     get_stb_sig(sid,csig);
     xsig = ALLOUTSIGS[sid ];
     for (abit = 0; abit < SignalIDWidth[sid]; abit = abit + 1) begin
       if (xsig[abit] !== 1'bx) begin
         if (xsig[abit] !== csig[abit]) begin
           if (errshown == 0) $display(">>>  Error during %0s pattern %0d", StmtNames[stmtid], cpat);
           if (SignalIDWidth[sid] <= 1) begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid]);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s (exp=%b, got=%b)", cpat, SignalIDName[sid], xsig[abit], csig[abit]);
             end 
           end 
           else begin 
             $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, signal %0s[%0d]", $time, v_count, xsig[abit], csig[abit], SignalIDName[sid], abit);
             if (diagf) begin 
               if (diagm==2) $fdisplay(diagf, "  C %0s[%0d] %0d (exp=%b, got=%b)", SignalIDName[sid], abit, v_count, xsig[abit], csig[abit]);
               else $fdisplay(diagf, "  %0d %0s[%d] (exp=%b, got=%b)", cpat, SignalIDName[sid], abit, xsig[abit], csig[abit]);
             end 
           end 
           nbfails = nbfails + 1;
           errshown = 1;
           ->error_ev;
         end 
       end 
     end 
   end 
   endtask

   task measure_scan_out;
     input reg [SIG_IDS-1:0] sid ;
     input integer  chain;
     reg [MAX_WIDTH-1:0] xsig;
     reg [MAX_WIDTH-1:0] csig;
     integer errshown, patoff;
   begin
     if (rt_ops[7] != -1 && cur_pat <= (first_pat) && loads<=1 ) disable measure_scan_out;
     errshown = 0;
     get_stb_sig(sid, csig);
     xsig = ALLOUTSIGS[sid ];
     if ((xsig[0] !==1'bx) && (xsig[0] !== csig[0])) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
       if (prev_error != cur_pat) begin
         if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
           $display(">>>  Error during scan pattern %0d %s", (cur_pat < 0) ? 0 : cur_pat,  (cur_pat == last_pat) ? "(detected from final pattern unload)" : "");
         end
         else begin
           if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d load/unload)", cur_pat, loads);
           else begin $display(">>>  Error during scan pattern %0d (detected from unload of pattern %0d)", cur_pat, cur_pat-1); end
         end 
         prev_error = cur_pat;
       end
       $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, chain %0s, pin %0s, scan cell %0d, cell name %0s", $time, v_count, xsig[0], csig[0], CH_NAMES[chain], SignalIDName[sid], fsci, SC_NAMES[(chain*MAXCHLEN)+fsci]);
       if (diagf) begin 
         if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b)", SignalIDName[sid], v_count, xsig[0], csig[0]);
          else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)", cur_pat-patoff, SignalIDName[sid], fsci, xsig[0], csig[0]);
       end 
       nbfails = nbfails + 1;
       ->error_ev;
             check_max_error_limit;
     end
   end 
   endtask

   always begin: measure_sigs_p
    fork
     forever @(ALLOUTSIGS['d`TEST_SO1]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`TEST_SO1, 0); 
       else measure_out_sig('d`TEST_SO1, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`TEST_SO2]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`TEST_SO2, 1); 
       else measure_out_sig('d`TEST_SO2, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`TEST_SO3]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`TEST_SO3, 2); 
       else measure_out_sig('d`TEST_SO3, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`TEST_SO4]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`TEST_SO4, 3); 
       else measure_out_sig('d`TEST_SO4, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so5]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so5, 4); 
       else measure_out_sig('d`test_so5, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so6]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so6, 5); 
       else measure_out_sig('d`test_so6, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so7]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so7, 6); 
       else measure_out_sig('d`test_so7, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so8]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so8, 7); 
       else measure_out_sig('d`test_so8, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so9]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so9, 8); 
       else measure_out_sig('d`test_so9, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so10]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so10, 9); 
       else measure_out_sig('d`test_so10, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so11]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so11, 10); 
       else measure_out_sig('d`test_so11, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so12]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so12, 11); 
       else measure_out_sig('d`test_so12, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so13]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so13, 12); 
       else measure_out_sig('d`test_so13, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so14]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so14, 13); 
       else measure_out_sig('d`test_so14, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so15]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so15, 14); 
       else measure_out_sig('d`test_so15, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so16]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so16, 15); 
       else measure_out_sig('d`test_so16, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so17]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so17, 16); 
       else measure_out_sig('d`test_so17, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so18]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so18, 17); 
       else measure_out_sig('d`test_so18, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so19]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so19, 18); 
       else measure_out_sig('d`test_so19, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so20]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so20, 19); 
       else measure_out_sig('d`test_so20, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so21]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so21, 20); 
       else measure_out_sig('d`test_so21, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so22]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so22, 21); 
       else measure_out_sig('d`test_so22, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so23]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so23, 22); 
       else measure_out_sig('d`test_so23, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so24]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so24, 23); 
       else measure_out_sig('d`test_so24, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so25]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so25, 24); 
       else measure_out_sig('d`test_so25, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so26]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so26, 25); 
       else measure_out_sig('d`test_so26, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so27]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so27, 26); 
       else measure_out_sig('d`test_so27, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so28]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so28, 27); 
       else measure_out_sig('d`test_so28, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so29]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so29, 28); 
       else measure_out_sig('d`test_so29, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so30]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so30, 29); 
       else measure_out_sig('d`test_so30, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so31]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so31, 30); 
       else measure_out_sig('d`test_so31, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so32]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so32, 31); 
       else measure_out_sig('d`test_so32, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so33]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so33, 32); 
       else measure_out_sig('d`test_so33, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so34]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so34, 33); 
       else measure_out_sig('d`test_so34, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so35]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so35, 34); 
       else measure_out_sig('d`test_so35, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so36]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so36, 35); 
       else measure_out_sig('d`test_so36, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so37]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so37, 36); 
       else measure_out_sig('d`test_so37, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so38]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so38, 37); 
       else measure_out_sig('d`test_so38, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so39]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so39, 38); 
       else measure_out_sig('d`test_so39, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so40]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so40, 39); 
       else measure_out_sig('d`test_so40, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so41]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so41, 40); 
       else measure_out_sig('d`test_so41, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so42]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so42, 41); 
       else measure_out_sig('d`test_so42, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so43]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so43, 42); 
       else measure_out_sig('d`test_so43, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so44]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so44, 43); 
       else measure_out_sig('d`test_so44, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so45]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so45, 44); 
       else measure_out_sig('d`test_so45, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so46]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so46, 45); 
       else measure_out_sig('d`test_so46, cur_stmt); 
     end
     forever @(ALLOUTSIGS['d`test_so47]) begin
       #0 if (cur_stmt == `VectorStmt || cur_stmt == `multiclock_captureStmt || cur_stmt == `allclock_captureStmt || cur_stmt == `allclock_launchStmt || cur_stmt == `allclock_launch_captureStmt || cur_stmt == `load_unloadStmt )
       if (cur_stmt ==`load_unloadStmt) measure_scan_out('d`test_so47, 46); 
       else measure_out_sig('d`test_so47, cur_stmt); 
     end
    join
   end 

   task undef_wfc;
     input reg [1:0] wfc;
     input reg [6:0] sid;
     input integer wftid;
   begin
     $display("XTB Error: unrecognized %s value (WFC):%0b, on signal %0s for WFT %0s. Exiting...", wfc[1]?"strobe":"force", wfc[0], SignalIDName[sid], WFTIDName[wftid]);
     $finish;
   end
   endtask

   task apply__multiclock_capture_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd7, 'd5, 'd1, 'd2, 'd3, 'd4, 'd8, 'd9, 'd10, 'd11, 'd12, 'd13, 'd14, 'd15, 'd16, 'd17, 'd18, 'd19, 'd20, 'd21, 'd22, 'd23, 'd24, 'd25, 'd26, 'd27, 'd28, 'd29, 'd30, 'd31, 'd32, 'd33, 'd34, 'd35, 'd36, 'd37, 'd38, 'd39, 'd40, 'd41, 'd42, 'd43, 'd44, 'd45, 'd46, 'd47, 'd48, 'd49, 'd50, 'd51, 'd52: // SCAN_MODE, TEST_SE, TEST_SI1, TEST_SI2, TEST_SI3, TEST_SI4, pll_bypass_2, pll_reset, test_si5, test_si6, test_si7, test_si8, test_si9, test_si10, test_si11, test_si12, test_si13, test_si14, test_si15, test_si16, test_si17, test_si18, test_si19, test_si20, test_si21, test_si22, test_si23, test_si24, test_si25, test_si26, test_si27, test_si28, test_si29, test_si30, test_si31, test_si32, test_si33, test_si34, test_si35, test_si36, test_si37, test_si38, test_si39, test_si40, test_si41, test_si42, test_si43, test_si44, test_si45, test_si46, test_si47_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd53, 'd54, 'd55, 'd56, 'd57, 'd58, 'd59, 'd60, 'd61, 'd62, 'd63, 'd64, 'd65, 'd66, 'd67, 'd68, 'd69, 'd70, 'd71, 'd72, 'd73, 'd74, 'd75, 'd76, 'd77, 'd78, 'd79, 'd80, 'd81, 'd82, 'd83, 'd84, 'd85, 'd86, 'd87, 'd88, 'd89, 'd90, 'd91, 'd92, 'd93, 'd94, 'd95, 'd96, 'd97, 'd98, 'd99: // TEST_SO1, TEST_SO2, TEST_SO3, TEST_SO4, test_so5, test_so6, test_so7, test_so8, test_so9, test_so10, test_so11, test_so12, test_so13, test_so14, test_so15, test_so16, test_so17, test_so18, test_so19, test_so20, test_so21, test_so22, test_so23, test_so24, test_so25, test_so26, test_so27, test_so28, test_so29, test_so30, test_so31, test_so32, test_so33, test_so34, test_so35, test_so36, test_so37, test_so38, test_so39, test_so40, test_so41, test_so42, test_so43, test_so44, test_so45, test_so46, test_so47_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
         'd6: // scan_clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 0);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__allclock_capture_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd7, 'd5, 'd1, 'd2, 'd3, 'd4, 'd8, 'd9, 'd10, 'd11, 'd12, 'd13, 'd14, 'd15, 'd16, 'd17, 'd18, 'd19, 'd20, 'd21, 'd22, 'd23, 'd24, 'd25, 'd26, 'd27, 'd28, 'd29, 'd30, 'd31, 'd32, 'd33, 'd34, 'd35, 'd36, 'd37, 'd38, 'd39, 'd40, 'd41, 'd42, 'd43, 'd44, 'd45, 'd46, 'd47, 'd48, 'd49, 'd50, 'd51, 'd52: // SCAN_MODE, TEST_SE, TEST_SI1, TEST_SI2, TEST_SI3, TEST_SI4, pll_bypass_2, pll_reset, test_si5, test_si6, test_si7, test_si8, test_si9, test_si10, test_si11, test_si12, test_si13, test_si14, test_si15, test_si16, test_si17, test_si18, test_si19, test_si20, test_si21, test_si22, test_si23, test_si24, test_si25, test_si26, test_si27, test_si28, test_si29, test_si30, test_si31, test_si32, test_si33, test_si34, test_si35, test_si36, test_si37, test_si38, test_si39, test_si40, test_si41, test_si42, test_si43, test_si44, test_si45, test_si46, test_si47_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd53, 'd54, 'd55, 'd56, 'd57, 'd58, 'd59, 'd60, 'd61, 'd62, 'd63, 'd64, 'd65, 'd66, 'd67, 'd68, 'd69, 'd70, 'd71, 'd72, 'd73, 'd74, 'd75, 'd76, 'd77, 'd78, 'd79, 'd80, 'd81, 'd82, 'd83, 'd84, 'd85, 'd86, 'd87, 'd88, 'd89, 'd90, 'd91, 'd92, 'd93, 'd94, 'd95, 'd96, 'd97, 'd98, 'd99: // TEST_SO1, TEST_SO2, TEST_SO3, TEST_SO4, test_so5, test_so6, test_so7, test_so8, test_so9, test_so10, test_so11, test_so12, test_so13, test_so14, test_so15, test_so16, test_so17, test_so18, test_so19, test_so20, test_so21, test_so22, test_so23, test_so24, test_so25, test_so26, test_so27, test_so28, test_so29, test_so30, test_so31, test_so32, test_so33, test_so34, test_so35, test_so36, test_so37, test_so38, test_so39, test_so40, test_so41, test_so42, test_so43, test_so44, test_so45, test_so46, test_so47_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
         'd6: // scan_clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 1);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__allclock_launch_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd7, 'd5, 'd1, 'd2, 'd3, 'd4, 'd8, 'd9, 'd10, 'd11, 'd12, 'd13, 'd14, 'd15, 'd16, 'd17, 'd18, 'd19, 'd20, 'd21, 'd22, 'd23, 'd24, 'd25, 'd26, 'd27, 'd28, 'd29, 'd30, 'd31, 'd32, 'd33, 'd34, 'd35, 'd36, 'd37, 'd38, 'd39, 'd40, 'd41, 'd42, 'd43, 'd44, 'd45, 'd46, 'd47, 'd48, 'd49, 'd50, 'd51, 'd52: // SCAN_MODE, TEST_SE, TEST_SI1, TEST_SI2, TEST_SI3, TEST_SI4, pll_bypass_2, pll_reset, test_si5, test_si6, test_si7, test_si8, test_si9, test_si10, test_si11, test_si12, test_si13, test_si14, test_si15, test_si16, test_si17, test_si18, test_si19, test_si20, test_si21, test_si22, test_si23, test_si24, test_si25, test_si26, test_si27, test_si28, test_si29, test_si30, test_si31, test_si32, test_si33, test_si34, test_si35, test_si36, test_si37, test_si38, test_si39, test_si40, test_si41, test_si42, test_si43, test_si44, test_si45, test_si46, test_si47_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 2);
               endcase
             end
           end
         end 
         'd53, 'd54, 'd55, 'd56, 'd57, 'd58, 'd59, 'd60, 'd61, 'd62, 'd63, 'd64, 'd65, 'd66, 'd67, 'd68, 'd69, 'd70, 'd71, 'd72, 'd73, 'd74, 'd75, 'd76, 'd77, 'd78, 'd79, 'd80, 'd81, 'd82, 'd83, 'd84, 'd85, 'd86, 'd87, 'd88, 'd89, 'd90, 'd91, 'd92, 'd93, 'd94, 'd95, 'd96, 'd97, 'd98, 'd99: // TEST_SO1, TEST_SO2, TEST_SO3, TEST_SO4, test_so5, test_so6, test_so7, test_so8, test_so9, test_so10, test_so11, test_so12, test_so13, test_so14, test_so15, test_so16, test_so17, test_so18, test_so19, test_so20, test_so21, test_so22, test_so23, test_so24, test_so25, test_so26, test_so27, test_so28, test_so29, test_so30, test_so31, test_so32, test_so33, test_so34, test_so35, test_so36, test_so37, test_so38, test_so39, test_so40, test_so41, test_so42, test_so43, test_so44, test_so45, test_so46, test_so47_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 2);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 2);
               endcase
             end
           end
         end 
         'd6: // scan_clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 2);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__allclock_launch_capture_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd7, 'd5, 'd1, 'd2, 'd3, 'd4, 'd8, 'd9, 'd10, 'd11, 'd12, 'd13, 'd14, 'd15, 'd16, 'd17, 'd18, 'd19, 'd20, 'd21, 'd22, 'd23, 'd24, 'd25, 'd26, 'd27, 'd28, 'd29, 'd30, 'd31, 'd32, 'd33, 'd34, 'd35, 'd36, 'd37, 'd38, 'd39, 'd40, 'd41, 'd42, 'd43, 'd44, 'd45, 'd46, 'd47, 'd48, 'd49, 'd50, 'd51, 'd52: // SCAN_MODE, TEST_SE, TEST_SI1, TEST_SI2, TEST_SI3, TEST_SI4, pll_bypass_2, pll_reset, test_si5, test_si6, test_si7, test_si8, test_si9, test_si10, test_si11, test_si12, test_si13, test_si14, test_si15, test_si16, test_si17, test_si18, test_si19, test_si20, test_si21, test_si22, test_si23, test_si24, test_si25, test_si26, test_si27, test_si28, test_si29, test_si30, test_si31, test_si32, test_si33, test_si34, test_si35, test_si36, test_si37, test_si38, test_si39, test_si40, test_si41, test_si42, test_si43, test_si44, test_si45, test_si46, test_si47_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 3);
               endcase
             end
           end
         end 
         'd53, 'd54, 'd55, 'd56, 'd57, 'd58, 'd59, 'd60, 'd61, 'd62, 'd63, 'd64, 'd65, 'd66, 'd67, 'd68, 'd69, 'd70, 'd71, 'd72, 'd73, 'd74, 'd75, 'd76, 'd77, 'd78, 'd79, 'd80, 'd81, 'd82, 'd83, 'd84, 'd85, 'd86, 'd87, 'd88, 'd89, 'd90, 'd91, 'd92, 'd93, 'd94, 'd95, 'd96, 'd97, 'd98, 'd99: // TEST_SO1, TEST_SO2, TEST_SO3, TEST_SO4, test_so5, test_so6, test_so7, test_so8, test_so9, test_so10, test_so11, test_so12, test_so13, test_so14, test_so15, test_so16, test_so17, test_so18, test_so19, test_so20, test_so21, test_so22, test_so23, test_so24, test_so25, test_so26, test_so27, test_so28, test_so29, test_so30, test_so31, test_so32, test_so33, test_so34, test_so35, test_so36, test_so37, test_so38, test_so39, test_so40, test_so41, test_so42, test_so43, test_so44, test_so45, test_so46, test_so47_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 3);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 3);
               endcase
             end
           end
         end 
         'd6: // scan_clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 3);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task apply__default_WFT_WFT;
     reg [SIG_IDS_W-1:0] sid;
     reg [SIG_IDS_W-1:0] n;
     reg [SIG_IDS-1:0] s;
   begin
     for (sid=0; sid < SIG_IDS; sid=sid+1) begin
       n=0; 
       case(sid)
         'd7, 'd5, 'd1, 'd2, 'd3, 'd4, 'd8, 'd9, 'd10, 'd11, 'd12, 'd13, 'd14, 'd15, 'd16, 'd17, 'd18, 'd19, 'd20, 'd21, 'd22, 'd23, 'd24, 'd25, 'd26, 'd27, 'd28, 'd29, 'd30, 'd31, 'd32, 'd33, 'd34, 'd35, 'd36, 'd37, 'd38, 'd39, 'd40, 'd41, 'd42, 'd43, 'd44, 'd45, 'd46, 'd47, 'd48, 'd49, 'd50, 'd51, 'd52: // SCAN_MODE, TEST_SE, TEST_SI1, TEST_SI2, TEST_SI3, TEST_SI4, pll_bypass_2, pll_reset, test_si5, test_si6, test_si7, test_si8, test_si9, test_si10, test_si11, test_si12, test_si13, test_si14, test_si15, test_si16, test_si17, test_si18, test_si19, test_si20, test_si21, test_si22, test_si23, test_si24, test_si25, test_si26, test_si27, test_si28, test_si29, test_si30, test_si31, test_si32, test_si33, test_si34, test_si35, test_si36, test_si37, test_si38, test_si39, test_si40, test_si41, test_si42, test_si43, test_si44, test_si45, test_si46, test_si47_con
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 4);
               endcase
             end
           end
         end 
         'd53, 'd54, 'd55, 'd56, 'd57, 'd58, 'd59, 'd60, 'd61, 'd62, 'd63, 'd64, 'd65, 'd66, 'd67, 'd68, 'd69, 'd70, 'd71, 'd72, 'd73, 'd74, 'd75, 'd76, 'd77, 'd78, 'd79, 'd80, 'd81, 'd82, 'd83, 'd84, 'd85, 'd86, 'd87, 'd88, 'd89, 'd90, 'd91, 'd92, 'd93, 'd94, 'd95, 'd96, 'd97, 'd98, 'd99: // TEST_SO1, TEST_SO2, TEST_SO3, TEST_SO4, test_so5, test_so6, test_so7, test_so8, test_so9, test_so10, test_so11, test_so12, test_so13, test_so14, test_so15, test_so16, test_so17, test_so18, test_so19, test_so20, test_so21, test_so22, test_so23, test_so24, test_so25, test_so26, test_so27, test_so28, test_so29, test_so30, test_so31, test_so32, test_so33, test_so34, test_so35, test_so36, test_so37, test_so38, test_so39, test_so40, test_so41, test_so42, test_so43, test_so44, test_so45, test_so46, test_so47_con
         begin
           if (ALLOUTSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]})
                 2'b1X: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bX;   end
                 2'b11: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b1;   end
                 2'b10: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'b0;   end
                 2'b1Z: begin 
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;
                         ALLOUTSIGS[MAX_SIGW*sid+n] <=    #(40) 1'bZ;   end
                 default: undef_wfc({TMPOUTSIGS_T[MAX_SIGW*sid+n],TMPOUTSIGS_V[MAX_SIGW*sid+n]}, sid, 4);
               endcase
             end
           end
         end 
         'd6: // scan_clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 4);
               endcase
             end
           end
         end 
         'd0: // clk
         begin
           if (ALLINSIGIDS[sid]==1'b1) begin
             for (n=0; n <SignalIDWidth[sid]; n=n+1) begin
               case ({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]})
                 2'b00: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   end
                 2'b01: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b1;   end
                 2'b0Z: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bZ;   end
                 2'b0X: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'bX;   end
                 2'bZ1: begin    ALLINSIGS[MAX_SIGW*sid+n] <=    #(0) 1'b0;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(45) 1'b1;   ALLINSIGS[MAX_SIGW*sid+n] <=    #(95) 1'b0;   end
                 default: undef_wfc({TMPINSIGS_T[MAX_SIGW*sid+n],TMPINSIGS_V[MAX_SIGW*sid+n]}, sid, 4);
               endcase
             end
           end
         end 
       endcase 
     end 
   end 
   endtask

   task resolve_wft;
     input integer wftid ;
   begin
     if (wftid > WFT_IDS || wftid <0) begin 
       $display("\nXTB Error: undefined WFT id %0d (valid range is 0..%0d). Exiting...",wftid, WFT_IDS);
       $finish;
     end
     the_wft_id = wftid;
   end
   endtask

   task apply_wft; 
     input integer wftid ;
   begin
     case (wftid) 
       'd0: apply__multiclock_capture_WFT_WFT;
       'd1: apply__allclock_capture_WFT_WFT;
       'd2: apply__allclock_launch_WFT_WFT;
       'd3: apply__allclock_launch_capture_WFT_WFT;
       'd4: apply__default_WFT_WFT;
       default:begin $display("\nXTB Error: undefined WFT id %d. Exiting...",wftid); $finish; end
     endcase
   end
   endtask 

   task complete_cycle;
     input integer wft_id ;
   begin
     case(wft_id)
       'd0: #(100); // _multiclock_capture_WFT_
       'd1: #(100); // _allclock_capture_WFT_
       'd2: #(100); // _allclock_launch_WFT_
       'd3: #(100); // _allclock_launch_capture_WFT_
       'd4: #(100); // _default_WFT_
     endcase
   end
   endtask

   task set_args;
     input reg [6:0] nargs;
     integer i, na;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [SIG_IDS_W-1:0] sid; 
   begin
     na = 0; sid_args = 'b0; sval_args = 'b0;
     while (na < nargs) begin
       data_i = data_i + 1;
       memel = memall[data_i];
       sid = memel[SIG_IDS_W-1:0];
       if (sid > SIG_IDS-1) begin
         $display($time, "\nXTB Error: Passing wrong signal ID (%0b), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
         $finish; 
       end
       sid_args[sid] = 1'b1;
       sidx = sig_idx(sid);
       for (i = 0; i < 2*SignalIDWidth[sid]; i = i + 1)
         sval_args[sidx+i] = memel[i+SIG_IDS_W];
       na=na+1; 
    end  
  end 
  endtask

   function [2*CUM_WIDTH-1:0] sig_idx;
     input reg [SIG_IDS_W-1:0] sid;
     integer i; 
   begin
     sig_idx = 0;
     for (i = 0; i < sid; i = i + 1)  sig_idx = sig_idx+2*SignalIDWidth[i]; 
   end 
   endfunction

   task  assign_mval;
     input reg [SIG_IDS_W-1:0] sid;
     input reg [2*MAX_WIDTH-1:0] msval;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [2*MAX_WIDTH-1:0] sval;
     integer i;
   begin 
     sidx = sig_idx(sid);
     for (i = 0; i<2*SignalIDWidth[sid]; i = i + 1) sval[i] = (msval[SignalIDWidth[sid] + i] !== 1'bx && i < SignalIDWidth[sid]) ? msval[i] : sval_args[sidx+i]  ;
     assign_val(sid , sval);
   end 
   endtask

   task  assign_ival;
     input reg [SIG_IDS_W-1:0] sid;
     reg [2*CUM_WIDTH-1:0] sidx;
     reg [2*MAX_WIDTH-1:0] sval;
     integer i;
   begin 
     sidx = sig_idx(sid);
     for (i = 0; i<2*SignalIDWidth[sid]; i = i + 1) sval[i] = sval_args[sidx+i];
     assign_val(sid , sval);
   end 
   endtask

   task  assign_val;
     input reg [SIG_IDS_W-1:0] sid;
     input reg [2*MAX_WIDTH-1:0] sval;
     reg [MAX_WIDTH-1:0] nb; 
     reg [8:0] idx;
     integer n, ns;
   begin
     if (sid > SIG_IDS-1 || sid < 0) begin
       $display("\nXTB Error: Passing wrong signal ID (%d), valid range is 1..%0d. Exiting...", sid, SIG_IDS-1);
       $finish;
     end
     resolve_signal(sid);
     idx = 0; 
     ns = (SignalIDType[sid]==3) ? SignalIDWidth[sid] : 1;
     for (n = 0; n < ns; n = n + 1)
     begin
       if (sval[idx+SignalIDWidth[sid]] === 1'b1) begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPOUTSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPOUTSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLOUTSIGIDS[the_sids[n]] = 1'b1; 
           if (sval[idx+nb] !== 1'bx)
             ALLINSIGIDS[the_sids[n]] = 1'b0;
         end
       end
       else begin
         for (nb = 0; nb < SignalIDWidth[the_sids[n]]; nb = nb + 1) begin
           TMPINSIGS_V[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb];
           TMPINSIGS_T[MAX_SIGW*the_sids[n]+nb]  = sval[idx+nb+SignalIDWidth[sid]];
           ALLINSIGIDS[the_sids[n]] = 1'b1;
           ALLOUTSIGIDS[the_sids[n]] = 1'b0;
       end 
     end
     idx = idx+SignalIDWidth[the_sids[n]];
     end 
   end 
   endtask

   task  check_sid_args;
     input reg [(NAMELENGTH-1):0] tname;
     input reg [SIG_IDS-1:0] vargs ;
     input reg [SIG_IDS-1:0] cargs ;
     integer i;
   begin
     for (i = 0; i < SIG_IDS-1; i = i + 1)
       if (cargs[i] === 1'b1 && vargs[i] !== 1'b1) begin
         $display("\nXTB Error: Passing wrong signal argument (%s), to Macro/Procedure %s. Exiting...", SignalIDName[i], tname); 
         $finish;
       end 
   end 
   endtask

   task  assign_stmt;
     input integer wftid ;
   begin
     v_count = v_count+1;
     v_count_per_pat = v_count_per_pat+1;
     v_count_per_stmt = v_count_per_stmt+1;
     if (verbose >= 4) $display("XTB: Starting V# %0d at time %0t", v_count, $time);
     apply_wft(wftid);
     complete_cycle(wftid);
   end
   endtask

   task display_stmt;
     input integer stmtid;
   begin
     $display("XTB: Processed statement: %0s", StmtNames[stmtid]);
   end
   endtask

   task read_data;
      integer tdf;
     begin
      tdf = $fopen(TDATA_FILE, "r");
      if (!tdf) begin 
         $display("XTB Error: cannot open %0s file. Exiting...\n", TDATA_FILE);
         $finish; 
      end 
      $fclose(tdf); 
     if (tdfm > 0) $display("XTB: Setting test data file to \"%0s\" (at %0s). Running simulation with new database...", TDATA_FILE, tdfm==1?"compile-time":"runtime");
     else if (verbose >= 1) $display("XTB: Reading test data file \"%0s\" ", TDATA_FILE);
     $readmemb(TDATA_FILE, memall);
   end
    endtask

   task measure_chain_out;
     input reg [NCHAINS-1:0] chid;
     integer bi, errshown, patoff, prefo;
     integer tsc;
     reg [0:MAXCHLEN-1] UNLM;
   begin
     tsc = 0;
     prefo = 0;
     UNLM = ~('b0);
     if (rt_ops[7] != -1 && cur_pat <= (first_pat)) disable measure_chain_out;
     CHAINOUT[0] = (CHAINOUT0);
     CHAINOUT[1] = (CHAINOUT1);
     CHAINOUT[2] = (CHAINOUT2);
     CHAINOUT[3] = (CHAINOUT3);
     CHAINOUT[4] = (CHAINOUT4);
     CHAINOUT[5] = (CHAINOUT5);
     CHAINOUT[6] = (CHAINOUT6);
     CHAINOUT[7] = (CHAINOUT7);
     CHAINOUT[8] = (CHAINOUT8);
     CHAINOUT[9] = (CHAINOUT9);
     CHAINOUT[10] = (CHAINOUT10);
     CHAINOUT[11] = (CHAINOUT11);
     CHAINOUT[12] = (CHAINOUT12);
     CHAINOUT[13] = (CHAINOUT13);
     CHAINOUT[14] = (CHAINOUT14);
     CHAINOUT[15] = (CHAINOUT15);
     CHAINOUT[16] = (CHAINOUT16);
     CHAINOUT[17] = (CHAINOUT17);
     CHAINOUT[18] = (CHAINOUT18);
     CHAINOUT[19] = (CHAINOUT19);
     CHAINOUT[20] = (CHAINOUT20);
     CHAINOUT[21] = (CHAINOUT21);
     CHAINOUT[22] = (CHAINOUT22);
     CHAINOUT[23] = (CHAINOUT23);
     CHAINOUT[24] = (CHAINOUT24);
     CHAINOUT[25] = (CHAINOUT25);
     CHAINOUT[26] = (CHAINOUT26);
     CHAINOUT[27] = (CHAINOUT27);
     CHAINOUT[28] = (CHAINOUT28);
     CHAINOUT[29] = (CHAINOUT29);
     CHAINOUT[30] = (CHAINOUT30);
     CHAINOUT[31] = (CHAINOUT31);
     CHAINOUT[32] = (CHAINOUT32);
     CHAINOUT[33] = (CHAINOUT33);
     CHAINOUT[34] = (CHAINOUT34);
     CHAINOUT[35] = (CHAINOUT35);
     CHAINOUT[36] = (CHAINOUT36);
     CHAINOUT[37] = (CHAINOUT37);
     CHAINOUT[38] = (CHAINOUT38);
     CHAINOUT[39] = (CHAINOUT39);
     CHAINOUT[40] = (CHAINOUT40);
     CHAINOUT[41] = (CHAINOUT41);
     CHAINOUT[42] = (CHAINOUT42);
     CHAINOUT[43] = (CHAINOUT43);
     CHAINOUT[44] = (CHAINOUT44);
     CHAINOUT[45] = (CHAINOUT45);
     CHAINOUT[46] = (CHAINOUT46);
     UNL = UNLOAD[chid] << prefo;
     CHOUT = CHAINOUT[chid] ^ CH_OUTINV[chid] ^ CT_OUTINV[chid];

     for (bi = 0; bi < MAXCHLEN; bi = bi + 1)
       if (UNL[bi] === 1'bx) UNLM[bi] = 1'b0;

     for (bi = 0; bi < prefo; bi = bi + 1) UNLM[MAXCHLEN-1-bi] = 1'b0;

     if ((UNL&UNLM) !== (CHOUT&UNLM)) begin
       patoff = (loads > 1 || cur_pat <= 0) ? 0 : 1;
     if (cur_pat <= 0 || cur_pat == last_pat && loads > 1) begin
       $display(">>>  Error during scan pattern %0d %s", (cur_pat<0)?0:cur_pat, (cur_pat==last_pat)?"(detected from final parallel pattern unload)":"");
     end
     else begin
       if (loads > 1) $display(">>>  Error during scan pattern %0d (detected from %0d parallel load/unload)", cur_pat, loads);
       else begin $display(">>>  Error during scan pattern %0d (detected from parallel unload of pattern %0d)", cur_pat, cur_pat-1); end
     end
       for (bi = 0; bi < MAXCHLEN-prefo; bi=bi + 1) begin
         if ((UNL[bi] !== 1'bx) && (UNL[bi] !== CHOUT[bi])) begin
           $display(">>>  \tAt T=%0t, V=%0d, exp=%b, got=%b, chain %0s, pin %0s, scan cell %0d, cell name %0s", $time, sertmg?v_count+1+bi+prefo:v_count, UNL[bi], CHOUT[bi], CH_NAMES[chid], CH_PINS[chid], bi+prefo+tsc, SC_NAMES[(chid*MAXCHLEN)+(bi+prefo+tsc)]);
           if (diagf) begin 
           if (diagm==2) $fdisplay(diagf, "  C %0s %0d (exp=%b, got=%b) ", CH_PINS[chid], v_count, UNL[bi], CHOUT[bi]);
           else $fdisplay(diagf, "  %0d %0s %0d (exp=%b, got=%b)",
               cur_pat-patoff, CH_PINS[chid], bi+prefo+tsc, UNL[bi], CHOUT[bi]);
           end 
           nbfails = nbfails + 1;
           ->error_ev;
       check_max_error_limit;
          end 
       end  
     end
   end 
   endtask

   task multiclock_capture ; //proc
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (verbose >= 2) $display("XTB: Starting proc multiclock_capture..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("multiclock_capture",107'b1, idargs);
     save_context;
     resolve_wft(0);

     assign_val('d`all_inputs , 106'b0000000000000000000000000000000000000000000000000000010XXXX0100XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);
     assign_val('d`all_outputs , 94'b11111111111111111111111111111111111111111111111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);

     assign_val('d`SCAN_MODE , 2'b01);
     assign_val('d`pll_bypass_2 , 2'b01);
     assign_val('d`pll_reset , 2'b00);

     if (idargs[100] === 1'b1) assign_ival('d`_pi );
     if (idargs[7] === 1'b1) assign_ival('d`SCAN_MODE );
     if (idargs[5] === 1'b1) assign_ival('d`TEST_SE );
     if (idargs[1] === 1'b1) assign_ival('d`TEST_SI1 );
     if (idargs[2] === 1'b1) assign_ival('d`TEST_SI2 );
     if (idargs[3] === 1'b1) assign_ival('d`TEST_SI3 );
     if (idargs[4] === 1'b1) assign_ival('d`TEST_SI4 );
     if (idargs[0] === 1'b1) assign_ival('d`clk );
     if (idargs[8] === 1'b1) assign_ival('d`pll_bypass_2 );
     if (idargs[6] === 1'b1) assign_ival('d`scan_clk );
     if (idargs[9] === 1'b1) assign_ival('d`pll_reset );
     if (idargs[10] === 1'b1) assign_ival('d`test_si5 );
     if (idargs[11] === 1'b1) assign_ival('d`test_si6 );
     if (idargs[12] === 1'b1) assign_ival('d`test_si7 );
     if (idargs[13] === 1'b1) assign_ival('d`test_si8 );
     if (idargs[14] === 1'b1) assign_ival('d`test_si9 );
     if (idargs[15] === 1'b1) assign_ival('d`test_si10 );
     if (idargs[16] === 1'b1) assign_ival('d`test_si11 );
     if (idargs[17] === 1'b1) assign_ival('d`test_si12 );
     if (idargs[18] === 1'b1) assign_ival('d`test_si13 );
     if (idargs[19] === 1'b1) assign_ival('d`test_si14 );
     if (idargs[20] === 1'b1) assign_ival('d`test_si15 );
     if (idargs[21] === 1'b1) assign_ival('d`test_si16 );
     if (idargs[22] === 1'b1) assign_ival('d`test_si17 );
     if (idargs[23] === 1'b1) assign_ival('d`test_si18 );
     if (idargs[24] === 1'b1) assign_ival('d`test_si19 );
     if (idargs[25] === 1'b1) assign_ival('d`test_si20 );
     if (idargs[26] === 1'b1) assign_ival('d`test_si21 );
     if (idargs[27] === 1'b1) assign_ival('d`test_si22 );
     if (idargs[28] === 1'b1) assign_ival('d`test_si23 );
     if (idargs[29] === 1'b1) assign_ival('d`test_si24 );
     if (idargs[30] === 1'b1) assign_ival('d`test_si25 );
     if (idargs[31] === 1'b1) assign_ival('d`test_si26 );
     if (idargs[32] === 1'b1) assign_ival('d`test_si27 );
     if (idargs[33] === 1'b1) assign_ival('d`test_si28 );
     if (idargs[34] === 1'b1) assign_ival('d`test_si29 );
     if (idargs[35] === 1'b1) assign_ival('d`test_si30 );
     if (idargs[36] === 1'b1) assign_ival('d`test_si31 );
     if (idargs[37] === 1'b1) assign_ival('d`test_si32 );
     if (idargs[38] === 1'b1) assign_ival('d`test_si33 );
     if (idargs[39] === 1'b1) assign_ival('d`test_si34 );
     if (idargs[40] === 1'b1) assign_ival('d`test_si35 );
     if (idargs[41] === 1'b1) assign_ival('d`test_si36 );
     if (idargs[42] === 1'b1) assign_ival('d`test_si37 );
     if (idargs[43] === 1'b1) assign_ival('d`test_si38 );
     if (idargs[44] === 1'b1) assign_ival('d`test_si39 );
     if (idargs[45] === 1'b1) assign_ival('d`test_si40 );
     if (idargs[46] === 1'b1) assign_ival('d`test_si41 );
     if (idargs[47] === 1'b1) assign_ival('d`test_si42 );
     if (idargs[48] === 1'b1) assign_ival('d`test_si43 );
     if (idargs[49] === 1'b1) assign_ival('d`test_si44 );
     if (idargs[50] === 1'b1) assign_ival('d`test_si45 );
     if (idargs[51] === 1'b1) assign_ival('d`test_si46 );
     if (idargs[52] === 1'b1) assign_ival('d`test_si47 );
     if (idargs[102] === 1'b1) assign_ival('d`_po );
     if (idargs[53] === 1'b1) assign_ival('d`TEST_SO1 );
     if (idargs[54] === 1'b1) assign_ival('d`TEST_SO2 );
     if (idargs[55] === 1'b1) assign_ival('d`TEST_SO3 );
     if (idargs[56] === 1'b1) assign_ival('d`TEST_SO4 );
     if (idargs[57] === 1'b1) assign_ival('d`test_so5 );
     if (idargs[58] === 1'b1) assign_ival('d`test_so6 );
     if (idargs[59] === 1'b1) assign_ival('d`test_so7 );
     if (idargs[60] === 1'b1) assign_ival('d`test_so8 );
     if (idargs[61] === 1'b1) assign_ival('d`test_so9 );
     if (idargs[62] === 1'b1) assign_ival('d`test_so10 );
     if (idargs[63] === 1'b1) assign_ival('d`test_so11 );
     if (idargs[64] === 1'b1) assign_ival('d`test_so12 );
     if (idargs[65] === 1'b1) assign_ival('d`test_so13 );
     if (idargs[66] === 1'b1) assign_ival('d`test_so14 );
     if (idargs[67] === 1'b1) assign_ival('d`test_so15 );
     if (idargs[68] === 1'b1) assign_ival('d`test_so16 );
     if (idargs[69] === 1'b1) assign_ival('d`test_so17 );
     if (idargs[70] === 1'b1) assign_ival('d`test_so18 );
     if (idargs[71] === 1'b1) assign_ival('d`test_so19 );
     if (idargs[72] === 1'b1) assign_ival('d`test_so20 );
     if (idargs[73] === 1'b1) assign_ival('d`test_so21 );
     if (idargs[74] === 1'b1) assign_ival('d`test_so22 );
     if (idargs[75] === 1'b1) assign_ival('d`test_so23 );
     if (idargs[76] === 1'b1) assign_ival('d`test_so24 );
     if (idargs[77] === 1'b1) assign_ival('d`test_so25 );
     if (idargs[78] === 1'b1) assign_ival('d`test_so26 );
     if (idargs[79] === 1'b1) assign_ival('d`test_so27 );
     if (idargs[80] === 1'b1) assign_ival('d`test_so28 );
     if (idargs[81] === 1'b1) assign_ival('d`test_so29 );
     if (idargs[82] === 1'b1) assign_ival('d`test_so30 );
     if (idargs[83] === 1'b1) assign_ival('d`test_so31 );
     if (idargs[84] === 1'b1) assign_ival('d`test_so32 );
     if (idargs[85] === 1'b1) assign_ival('d`test_so33 );
     if (idargs[86] === 1'b1) assign_ival('d`test_so34 );
     if (idargs[87] === 1'b1) assign_ival('d`test_so35 );
     if (idargs[88] === 1'b1) assign_ival('d`test_so36 );
     if (idargs[89] === 1'b1) assign_ival('d`test_so37 );
     if (idargs[90] === 1'b1) assign_ival('d`test_so38 );
     if (idargs[91] === 1'b1) assign_ival('d`test_so39 );
     if (idargs[92] === 1'b1) assign_ival('d`test_so40 );
     if (idargs[93] === 1'b1) assign_ival('d`test_so41 );
     if (idargs[94] === 1'b1) assign_ival('d`test_so42 );
     if (idargs[95] === 1'b1) assign_ival('d`test_so43 );
     if (idargs[96] === 1'b1) assign_ival('d`test_so44 );
     if (idargs[97] === 1'b1) assign_ival('d`test_so45 );
     if (idargs[98] === 1'b1) assign_ival('d`test_so46 );
     if (idargs[99] === 1'b1) assign_ival('d`test_so47 );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask

   task allclock_capture ; //proc
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (verbose >= 2) $display("XTB: Starting proc allclock_capture..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("allclock_capture",107'b1, idargs);
     save_context;
     resolve_wft(1);

     assign_val('d`all_inputs , 106'b0000000000000000000000000000000000000000000000000000010XXXX0100XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);
     assign_val('d`all_outputs , 94'b11111111111111111111111111111111111111111111111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);

     assign_val('d`SCAN_MODE , 2'b01);
     assign_val('d`pll_bypass_2 , 2'b01);
     assign_val('d`pll_reset , 2'b00);

     if (idargs[100] === 1'b1) assign_ival('d`_pi );
     if (idargs[7] === 1'b1) assign_ival('d`SCAN_MODE );
     if (idargs[5] === 1'b1) assign_ival('d`TEST_SE );
     if (idargs[1] === 1'b1) assign_ival('d`TEST_SI1 );
     if (idargs[2] === 1'b1) assign_ival('d`TEST_SI2 );
     if (idargs[3] === 1'b1) assign_ival('d`TEST_SI3 );
     if (idargs[4] === 1'b1) assign_ival('d`TEST_SI4 );
     if (idargs[0] === 1'b1) assign_ival('d`clk );
     if (idargs[8] === 1'b1) assign_ival('d`pll_bypass_2 );
     if (idargs[6] === 1'b1) assign_ival('d`scan_clk );
     if (idargs[9] === 1'b1) assign_ival('d`pll_reset );
     if (idargs[10] === 1'b1) assign_ival('d`test_si5 );
     if (idargs[11] === 1'b1) assign_ival('d`test_si6 );
     if (idargs[12] === 1'b1) assign_ival('d`test_si7 );
     if (idargs[13] === 1'b1) assign_ival('d`test_si8 );
     if (idargs[14] === 1'b1) assign_ival('d`test_si9 );
     if (idargs[15] === 1'b1) assign_ival('d`test_si10 );
     if (idargs[16] === 1'b1) assign_ival('d`test_si11 );
     if (idargs[17] === 1'b1) assign_ival('d`test_si12 );
     if (idargs[18] === 1'b1) assign_ival('d`test_si13 );
     if (idargs[19] === 1'b1) assign_ival('d`test_si14 );
     if (idargs[20] === 1'b1) assign_ival('d`test_si15 );
     if (idargs[21] === 1'b1) assign_ival('d`test_si16 );
     if (idargs[22] === 1'b1) assign_ival('d`test_si17 );
     if (idargs[23] === 1'b1) assign_ival('d`test_si18 );
     if (idargs[24] === 1'b1) assign_ival('d`test_si19 );
     if (idargs[25] === 1'b1) assign_ival('d`test_si20 );
     if (idargs[26] === 1'b1) assign_ival('d`test_si21 );
     if (idargs[27] === 1'b1) assign_ival('d`test_si22 );
     if (idargs[28] === 1'b1) assign_ival('d`test_si23 );
     if (idargs[29] === 1'b1) assign_ival('d`test_si24 );
     if (idargs[30] === 1'b1) assign_ival('d`test_si25 );
     if (idargs[31] === 1'b1) assign_ival('d`test_si26 );
     if (idargs[32] === 1'b1) assign_ival('d`test_si27 );
     if (idargs[33] === 1'b1) assign_ival('d`test_si28 );
     if (idargs[34] === 1'b1) assign_ival('d`test_si29 );
     if (idargs[35] === 1'b1) assign_ival('d`test_si30 );
     if (idargs[36] === 1'b1) assign_ival('d`test_si31 );
     if (idargs[37] === 1'b1) assign_ival('d`test_si32 );
     if (idargs[38] === 1'b1) assign_ival('d`test_si33 );
     if (idargs[39] === 1'b1) assign_ival('d`test_si34 );
     if (idargs[40] === 1'b1) assign_ival('d`test_si35 );
     if (idargs[41] === 1'b1) assign_ival('d`test_si36 );
     if (idargs[42] === 1'b1) assign_ival('d`test_si37 );
     if (idargs[43] === 1'b1) assign_ival('d`test_si38 );
     if (idargs[44] === 1'b1) assign_ival('d`test_si39 );
     if (idargs[45] === 1'b1) assign_ival('d`test_si40 );
     if (idargs[46] === 1'b1) assign_ival('d`test_si41 );
     if (idargs[47] === 1'b1) assign_ival('d`test_si42 );
     if (idargs[48] === 1'b1) assign_ival('d`test_si43 );
     if (idargs[49] === 1'b1) assign_ival('d`test_si44 );
     if (idargs[50] === 1'b1) assign_ival('d`test_si45 );
     if (idargs[51] === 1'b1) assign_ival('d`test_si46 );
     if (idargs[52] === 1'b1) assign_ival('d`test_si47 );
     if (idargs[102] === 1'b1) assign_ival('d`_po );
     if (idargs[53] === 1'b1) assign_ival('d`TEST_SO1 );
     if (idargs[54] === 1'b1) assign_ival('d`TEST_SO2 );
     if (idargs[55] === 1'b1) assign_ival('d`TEST_SO3 );
     if (idargs[56] === 1'b1) assign_ival('d`TEST_SO4 );
     if (idargs[57] === 1'b1) assign_ival('d`test_so5 );
     if (idargs[58] === 1'b1) assign_ival('d`test_so6 );
     if (idargs[59] === 1'b1) assign_ival('d`test_so7 );
     if (idargs[60] === 1'b1) assign_ival('d`test_so8 );
     if (idargs[61] === 1'b1) assign_ival('d`test_so9 );
     if (idargs[62] === 1'b1) assign_ival('d`test_so10 );
     if (idargs[63] === 1'b1) assign_ival('d`test_so11 );
     if (idargs[64] === 1'b1) assign_ival('d`test_so12 );
     if (idargs[65] === 1'b1) assign_ival('d`test_so13 );
     if (idargs[66] === 1'b1) assign_ival('d`test_so14 );
     if (idargs[67] === 1'b1) assign_ival('d`test_so15 );
     if (idargs[68] === 1'b1) assign_ival('d`test_so16 );
     if (idargs[69] === 1'b1) assign_ival('d`test_so17 );
     if (idargs[70] === 1'b1) assign_ival('d`test_so18 );
     if (idargs[71] === 1'b1) assign_ival('d`test_so19 );
     if (idargs[72] === 1'b1) assign_ival('d`test_so20 );
     if (idargs[73] === 1'b1) assign_ival('d`test_so21 );
     if (idargs[74] === 1'b1) assign_ival('d`test_so22 );
     if (idargs[75] === 1'b1) assign_ival('d`test_so23 );
     if (idargs[76] === 1'b1) assign_ival('d`test_so24 );
     if (idargs[77] === 1'b1) assign_ival('d`test_so25 );
     if (idargs[78] === 1'b1) assign_ival('d`test_so26 );
     if (idargs[79] === 1'b1) assign_ival('d`test_so27 );
     if (idargs[80] === 1'b1) assign_ival('d`test_so28 );
     if (idargs[81] === 1'b1) assign_ival('d`test_so29 );
     if (idargs[82] === 1'b1) assign_ival('d`test_so30 );
     if (idargs[83] === 1'b1) assign_ival('d`test_so31 );
     if (idargs[84] === 1'b1) assign_ival('d`test_so32 );
     if (idargs[85] === 1'b1) assign_ival('d`test_so33 );
     if (idargs[86] === 1'b1) assign_ival('d`test_so34 );
     if (idargs[87] === 1'b1) assign_ival('d`test_so35 );
     if (idargs[88] === 1'b1) assign_ival('d`test_so36 );
     if (idargs[89] === 1'b1) assign_ival('d`test_so37 );
     if (idargs[90] === 1'b1) assign_ival('d`test_so38 );
     if (idargs[91] === 1'b1) assign_ival('d`test_so39 );
     if (idargs[92] === 1'b1) assign_ival('d`test_so40 );
     if (idargs[93] === 1'b1) assign_ival('d`test_so41 );
     if (idargs[94] === 1'b1) assign_ival('d`test_so42 );
     if (idargs[95] === 1'b1) assign_ival('d`test_so43 );
     if (idargs[96] === 1'b1) assign_ival('d`test_so44 );
     if (idargs[97] === 1'b1) assign_ival('d`test_so45 );
     if (idargs[98] === 1'b1) assign_ival('d`test_so46 );
     if (idargs[99] === 1'b1) assign_ival('d`test_so47 );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask

   task allclock_launch ; //proc
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (verbose >= 2) $display("XTB: Starting proc allclock_launch..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("allclock_launch",107'b1, idargs);
     save_context;
     resolve_wft(2);

     assign_val('d`all_inputs , 106'b0000000000000000000000000000000000000000000000000000010XXXX0100XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);
     assign_val('d`all_outputs , 94'b11111111111111111111111111111111111111111111111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);

     assign_val('d`SCAN_MODE , 2'b01);
     assign_val('d`pll_bypass_2 , 2'b01);
     assign_val('d`pll_reset , 2'b00);

     if (idargs[100] === 1'b1) assign_ival('d`_pi );
     if (idargs[7] === 1'b1) assign_ival('d`SCAN_MODE );
     if (idargs[5] === 1'b1) assign_ival('d`TEST_SE );
     if (idargs[1] === 1'b1) assign_ival('d`TEST_SI1 );
     if (idargs[2] === 1'b1) assign_ival('d`TEST_SI2 );
     if (idargs[3] === 1'b1) assign_ival('d`TEST_SI3 );
     if (idargs[4] === 1'b1) assign_ival('d`TEST_SI4 );
     if (idargs[0] === 1'b1) assign_ival('d`clk );
     if (idargs[8] === 1'b1) assign_ival('d`pll_bypass_2 );
     if (idargs[6] === 1'b1) assign_ival('d`scan_clk );
     if (idargs[9] === 1'b1) assign_ival('d`pll_reset );
     if (idargs[10] === 1'b1) assign_ival('d`test_si5 );
     if (idargs[11] === 1'b1) assign_ival('d`test_si6 );
     if (idargs[12] === 1'b1) assign_ival('d`test_si7 );
     if (idargs[13] === 1'b1) assign_ival('d`test_si8 );
     if (idargs[14] === 1'b1) assign_ival('d`test_si9 );
     if (idargs[15] === 1'b1) assign_ival('d`test_si10 );
     if (idargs[16] === 1'b1) assign_ival('d`test_si11 );
     if (idargs[17] === 1'b1) assign_ival('d`test_si12 );
     if (idargs[18] === 1'b1) assign_ival('d`test_si13 );
     if (idargs[19] === 1'b1) assign_ival('d`test_si14 );
     if (idargs[20] === 1'b1) assign_ival('d`test_si15 );
     if (idargs[21] === 1'b1) assign_ival('d`test_si16 );
     if (idargs[22] === 1'b1) assign_ival('d`test_si17 );
     if (idargs[23] === 1'b1) assign_ival('d`test_si18 );
     if (idargs[24] === 1'b1) assign_ival('d`test_si19 );
     if (idargs[25] === 1'b1) assign_ival('d`test_si20 );
     if (idargs[26] === 1'b1) assign_ival('d`test_si21 );
     if (idargs[27] === 1'b1) assign_ival('d`test_si22 );
     if (idargs[28] === 1'b1) assign_ival('d`test_si23 );
     if (idargs[29] === 1'b1) assign_ival('d`test_si24 );
     if (idargs[30] === 1'b1) assign_ival('d`test_si25 );
     if (idargs[31] === 1'b1) assign_ival('d`test_si26 );
     if (idargs[32] === 1'b1) assign_ival('d`test_si27 );
     if (idargs[33] === 1'b1) assign_ival('d`test_si28 );
     if (idargs[34] === 1'b1) assign_ival('d`test_si29 );
     if (idargs[35] === 1'b1) assign_ival('d`test_si30 );
     if (idargs[36] === 1'b1) assign_ival('d`test_si31 );
     if (idargs[37] === 1'b1) assign_ival('d`test_si32 );
     if (idargs[38] === 1'b1) assign_ival('d`test_si33 );
     if (idargs[39] === 1'b1) assign_ival('d`test_si34 );
     if (idargs[40] === 1'b1) assign_ival('d`test_si35 );
     if (idargs[41] === 1'b1) assign_ival('d`test_si36 );
     if (idargs[42] === 1'b1) assign_ival('d`test_si37 );
     if (idargs[43] === 1'b1) assign_ival('d`test_si38 );
     if (idargs[44] === 1'b1) assign_ival('d`test_si39 );
     if (idargs[45] === 1'b1) assign_ival('d`test_si40 );
     if (idargs[46] === 1'b1) assign_ival('d`test_si41 );
     if (idargs[47] === 1'b1) assign_ival('d`test_si42 );
     if (idargs[48] === 1'b1) assign_ival('d`test_si43 );
     if (idargs[49] === 1'b1) assign_ival('d`test_si44 );
     if (idargs[50] === 1'b1) assign_ival('d`test_si45 );
     if (idargs[51] === 1'b1) assign_ival('d`test_si46 );
     if (idargs[52] === 1'b1) assign_ival('d`test_si47 );
     if (idargs[102] === 1'b1) assign_ival('d`_po );
     if (idargs[53] === 1'b1) assign_ival('d`TEST_SO1 );
     if (idargs[54] === 1'b1) assign_ival('d`TEST_SO2 );
     if (idargs[55] === 1'b1) assign_ival('d`TEST_SO3 );
     if (idargs[56] === 1'b1) assign_ival('d`TEST_SO4 );
     if (idargs[57] === 1'b1) assign_ival('d`test_so5 );
     if (idargs[58] === 1'b1) assign_ival('d`test_so6 );
     if (idargs[59] === 1'b1) assign_ival('d`test_so7 );
     if (idargs[60] === 1'b1) assign_ival('d`test_so8 );
     if (idargs[61] === 1'b1) assign_ival('d`test_so9 );
     if (idargs[62] === 1'b1) assign_ival('d`test_so10 );
     if (idargs[63] === 1'b1) assign_ival('d`test_so11 );
     if (idargs[64] === 1'b1) assign_ival('d`test_so12 );
     if (idargs[65] === 1'b1) assign_ival('d`test_so13 );
     if (idargs[66] === 1'b1) assign_ival('d`test_so14 );
     if (idargs[67] === 1'b1) assign_ival('d`test_so15 );
     if (idargs[68] === 1'b1) assign_ival('d`test_so16 );
     if (idargs[69] === 1'b1) assign_ival('d`test_so17 );
     if (idargs[70] === 1'b1) assign_ival('d`test_so18 );
     if (idargs[71] === 1'b1) assign_ival('d`test_so19 );
     if (idargs[72] === 1'b1) assign_ival('d`test_so20 );
     if (idargs[73] === 1'b1) assign_ival('d`test_so21 );
     if (idargs[74] === 1'b1) assign_ival('d`test_so22 );
     if (idargs[75] === 1'b1) assign_ival('d`test_so23 );
     if (idargs[76] === 1'b1) assign_ival('d`test_so24 );
     if (idargs[77] === 1'b1) assign_ival('d`test_so25 );
     if (idargs[78] === 1'b1) assign_ival('d`test_so26 );
     if (idargs[79] === 1'b1) assign_ival('d`test_so27 );
     if (idargs[80] === 1'b1) assign_ival('d`test_so28 );
     if (idargs[81] === 1'b1) assign_ival('d`test_so29 );
     if (idargs[82] === 1'b1) assign_ival('d`test_so30 );
     if (idargs[83] === 1'b1) assign_ival('d`test_so31 );
     if (idargs[84] === 1'b1) assign_ival('d`test_so32 );
     if (idargs[85] === 1'b1) assign_ival('d`test_so33 );
     if (idargs[86] === 1'b1) assign_ival('d`test_so34 );
     if (idargs[87] === 1'b1) assign_ival('d`test_so35 );
     if (idargs[88] === 1'b1) assign_ival('d`test_so36 );
     if (idargs[89] === 1'b1) assign_ival('d`test_so37 );
     if (idargs[90] === 1'b1) assign_ival('d`test_so38 );
     if (idargs[91] === 1'b1) assign_ival('d`test_so39 );
     if (idargs[92] === 1'b1) assign_ival('d`test_so40 );
     if (idargs[93] === 1'b1) assign_ival('d`test_so41 );
     if (idargs[94] === 1'b1) assign_ival('d`test_so42 );
     if (idargs[95] === 1'b1) assign_ival('d`test_so43 );
     if (idargs[96] === 1'b1) assign_ival('d`test_so44 );
     if (idargs[97] === 1'b1) assign_ival('d`test_so45 );
     if (idargs[98] === 1'b1) assign_ival('d`test_so46 );
     if (idargs[99] === 1'b1) assign_ival('d`test_so47 );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask

   task allclock_launch_capture ; //proc
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (verbose >= 2) $display("XTB: Starting proc allclock_launch_capture..., T=%0t, V=%0d", $time, v_count+1);
     //check_sid_args("allclock_launch_capture",107'b1, idargs);
     save_context;
     resolve_wft(3);

     assign_val('d`all_inputs , 106'b0000000000000000000000000000000000000000000000000000010XXXX0100XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);
     assign_val('d`all_outputs , 94'b11111111111111111111111111111111111111111111111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX);

     assign_val('d`SCAN_MODE , 2'b01);
     assign_val('d`pll_bypass_2 , 2'b01);
     assign_val('d`pll_reset , 2'b00);

     if (idargs[100] === 1'b1) assign_ival('d`_pi );
     if (idargs[7] === 1'b1) assign_ival('d`SCAN_MODE );
     if (idargs[5] === 1'b1) assign_ival('d`TEST_SE );
     if (idargs[1] === 1'b1) assign_ival('d`TEST_SI1 );
     if (idargs[2] === 1'b1) assign_ival('d`TEST_SI2 );
     if (idargs[3] === 1'b1) assign_ival('d`TEST_SI3 );
     if (idargs[4] === 1'b1) assign_ival('d`TEST_SI4 );
     if (idargs[0] === 1'b1) assign_ival('d`clk );
     if (idargs[8] === 1'b1) assign_ival('d`pll_bypass_2 );
     if (idargs[6] === 1'b1) assign_ival('d`scan_clk );
     if (idargs[9] === 1'b1) assign_ival('d`pll_reset );
     if (idargs[10] === 1'b1) assign_ival('d`test_si5 );
     if (idargs[11] === 1'b1) assign_ival('d`test_si6 );
     if (idargs[12] === 1'b1) assign_ival('d`test_si7 );
     if (idargs[13] === 1'b1) assign_ival('d`test_si8 );
     if (idargs[14] === 1'b1) assign_ival('d`test_si9 );
     if (idargs[15] === 1'b1) assign_ival('d`test_si10 );
     if (idargs[16] === 1'b1) assign_ival('d`test_si11 );
     if (idargs[17] === 1'b1) assign_ival('d`test_si12 );
     if (idargs[18] === 1'b1) assign_ival('d`test_si13 );
     if (idargs[19] === 1'b1) assign_ival('d`test_si14 );
     if (idargs[20] === 1'b1) assign_ival('d`test_si15 );
     if (idargs[21] === 1'b1) assign_ival('d`test_si16 );
     if (idargs[22] === 1'b1) assign_ival('d`test_si17 );
     if (idargs[23] === 1'b1) assign_ival('d`test_si18 );
     if (idargs[24] === 1'b1) assign_ival('d`test_si19 );
     if (idargs[25] === 1'b1) assign_ival('d`test_si20 );
     if (idargs[26] === 1'b1) assign_ival('d`test_si21 );
     if (idargs[27] === 1'b1) assign_ival('d`test_si22 );
     if (idargs[28] === 1'b1) assign_ival('d`test_si23 );
     if (idargs[29] === 1'b1) assign_ival('d`test_si24 );
     if (idargs[30] === 1'b1) assign_ival('d`test_si25 );
     if (idargs[31] === 1'b1) assign_ival('d`test_si26 );
     if (idargs[32] === 1'b1) assign_ival('d`test_si27 );
     if (idargs[33] === 1'b1) assign_ival('d`test_si28 );
     if (idargs[34] === 1'b1) assign_ival('d`test_si29 );
     if (idargs[35] === 1'b1) assign_ival('d`test_si30 );
     if (idargs[36] === 1'b1) assign_ival('d`test_si31 );
     if (idargs[37] === 1'b1) assign_ival('d`test_si32 );
     if (idargs[38] === 1'b1) assign_ival('d`test_si33 );
     if (idargs[39] === 1'b1) assign_ival('d`test_si34 );
     if (idargs[40] === 1'b1) assign_ival('d`test_si35 );
     if (idargs[41] === 1'b1) assign_ival('d`test_si36 );
     if (idargs[42] === 1'b1) assign_ival('d`test_si37 );
     if (idargs[43] === 1'b1) assign_ival('d`test_si38 );
     if (idargs[44] === 1'b1) assign_ival('d`test_si39 );
     if (idargs[45] === 1'b1) assign_ival('d`test_si40 );
     if (idargs[46] === 1'b1) assign_ival('d`test_si41 );
     if (idargs[47] === 1'b1) assign_ival('d`test_si42 );
     if (idargs[48] === 1'b1) assign_ival('d`test_si43 );
     if (idargs[49] === 1'b1) assign_ival('d`test_si44 );
     if (idargs[50] === 1'b1) assign_ival('d`test_si45 );
     if (idargs[51] === 1'b1) assign_ival('d`test_si46 );
     if (idargs[52] === 1'b1) assign_ival('d`test_si47 );
     if (idargs[102] === 1'b1) assign_ival('d`_po );
     if (idargs[53] === 1'b1) assign_ival('d`TEST_SO1 );
     if (idargs[54] === 1'b1) assign_ival('d`TEST_SO2 );
     if (idargs[55] === 1'b1) assign_ival('d`TEST_SO3 );
     if (idargs[56] === 1'b1) assign_ival('d`TEST_SO4 );
     if (idargs[57] === 1'b1) assign_ival('d`test_so5 );
     if (idargs[58] === 1'b1) assign_ival('d`test_so6 );
     if (idargs[59] === 1'b1) assign_ival('d`test_so7 );
     if (idargs[60] === 1'b1) assign_ival('d`test_so8 );
     if (idargs[61] === 1'b1) assign_ival('d`test_so9 );
     if (idargs[62] === 1'b1) assign_ival('d`test_so10 );
     if (idargs[63] === 1'b1) assign_ival('d`test_so11 );
     if (idargs[64] === 1'b1) assign_ival('d`test_so12 );
     if (idargs[65] === 1'b1) assign_ival('d`test_so13 );
     if (idargs[66] === 1'b1) assign_ival('d`test_so14 );
     if (idargs[67] === 1'b1) assign_ival('d`test_so15 );
     if (idargs[68] === 1'b1) assign_ival('d`test_so16 );
     if (idargs[69] === 1'b1) assign_ival('d`test_so17 );
     if (idargs[70] === 1'b1) assign_ival('d`test_so18 );
     if (idargs[71] === 1'b1) assign_ival('d`test_so19 );
     if (idargs[72] === 1'b1) assign_ival('d`test_so20 );
     if (idargs[73] === 1'b1) assign_ival('d`test_so21 );
     if (idargs[74] === 1'b1) assign_ival('d`test_so22 );
     if (idargs[75] === 1'b1) assign_ival('d`test_so23 );
     if (idargs[76] === 1'b1) assign_ival('d`test_so24 );
     if (idargs[77] === 1'b1) assign_ival('d`test_so25 );
     if (idargs[78] === 1'b1) assign_ival('d`test_so26 );
     if (idargs[79] === 1'b1) assign_ival('d`test_so27 );
     if (idargs[80] === 1'b1) assign_ival('d`test_so28 );
     if (idargs[81] === 1'b1) assign_ival('d`test_so29 );
     if (idargs[82] === 1'b1) assign_ival('d`test_so30 );
     if (idargs[83] === 1'b1) assign_ival('d`test_so31 );
     if (idargs[84] === 1'b1) assign_ival('d`test_so32 );
     if (idargs[85] === 1'b1) assign_ival('d`test_so33 );
     if (idargs[86] === 1'b1) assign_ival('d`test_so34 );
     if (idargs[87] === 1'b1) assign_ival('d`test_so35 );
     if (idargs[88] === 1'b1) assign_ival('d`test_so36 );
     if (idargs[89] === 1'b1) assign_ival('d`test_so37 );
     if (idargs[90] === 1'b1) assign_ival('d`test_so38 );
     if (idargs[91] === 1'b1) assign_ival('d`test_so39 );
     if (idargs[92] === 1'b1) assign_ival('d`test_so40 );
     if (idargs[93] === 1'b1) assign_ival('d`test_so41 );
     if (idargs[94] === 1'b1) assign_ival('d`test_so42 );
     if (idargs[95] === 1'b1) assign_ival('d`test_so43 );
     if (idargs[96] === 1'b1) assign_ival('d`test_so44 );
     if (idargs[97] === 1'b1) assign_ival('d`test_so45 );
     if (idargs[98] === 1'b1) assign_ival('d`test_so46 );
     if (idargs[99] === 1'b1) assign_ival('d`test_so47 );
     assign_stmt(the_wft_id);

     restore_context;
   end 
   endtask

   task load_unload ; //proc
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
   begin
     v_count_per_stmt = 0;
     if (verbose >= 2) $display("XTB: Starting proc load_unload..., T=%0t, V=%0d", $time, v_count+1);

     if (xtb_sim_mode == 0 && ser_pats > 0 && cur_pat < last_pat && cur_pat == (ser_pats+first_pat)) begin
       $display("XTB: Switching into Parallel simulation mode at pattern %0d (using %0d serial shifts)", cur_pat, SSHIFTS);
       xtb_sim_mode = 1; 
     end
     if (cur_pat != prev_pat) begin
       loads = 1;
       prev_pat = cur_pat;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, $time, v_count+1);
     end
     else begin
       loads = loads + 1;
       if (cur_pat % rep_pat == 0)
         $display("XTB: Begin %0s scan load for pattern %0d, unload %0d (T=%0t, V=%0d)", xtb_sim_mode?"parallel":"serial", cur_pat, loads, $time, v_count+1);
     end
     save_context;
     resolve_wft(4);

     assign_val('d`SCAN_MODE , 2'b01);
     assign_val('d`TEST_SE , 2'b00);
     assign_val('d`TEST_SI1 , 2'b0X);
     assign_val('d`TEST_SI2 , 2'b0X);
     assign_val('d`TEST_SI3 , 2'b0X);
     assign_val('d`TEST_SI4 , 2'b0X);
     assign_val('d`clk , 2'b00);
     assign_val('d`pll_bypass_2 , 2'b01);
     assign_val('d`scan_clk , 2'b00);
     assign_val('d`TEST_SO1 , 2'b1X);
     assign_val('d`TEST_SO2 , 2'b1X);
     assign_val('d`TEST_SO3 , 2'b1X);
     assign_val('d`TEST_SO4 , 2'b1X);
     assign_val('d`pll_reset , 2'b00);
     assign_val('d`test_si5 , 2'b0X);
     assign_val('d`test_so5 , 2'b1X);
     assign_val('d`test_si6 , 2'b0X);
     assign_val('d`test_so6 , 2'b1X);
     assign_val('d`test_si7 , 2'b0X);
     assign_val('d`test_so7 , 2'b1X);
     assign_val('d`test_si8 , 2'b0X);
     assign_val('d`test_so8 , 2'b1X);
     assign_val('d`test_si9 , 2'b0X);
     assign_val('d`test_so9 , 2'b1X);
     assign_val('d`test_si10 , 2'b0X);
     assign_val('d`test_so10 , 2'b1X);
     assign_val('d`test_si11 , 2'b0X);
     assign_val('d`test_so11 , 2'b1X);
     assign_val('d`test_si12 , 2'b0X);
     assign_val('d`test_so12 , 2'b1X);
     assign_val('d`test_si13 , 2'b0X);
     assign_val('d`test_so13 , 2'b1X);
     assign_val('d`test_si14 , 2'b0X);
     assign_val('d`test_so14 , 2'b1X);
     assign_val('d`test_si15 , 2'b0X);
     assign_val('d`test_so15 , 2'b1X);
     assign_val('d`test_si16 , 2'b0X);
     assign_val('d`test_so16 , 2'b1X);
     assign_val('d`test_si17 , 2'b0X);
     assign_val('d`test_so17 , 2'b1X);
     assign_val('d`test_si18 , 2'b0X);
     assign_val('d`test_so18 , 2'b1X);
     assign_val('d`test_si19 , 2'b0X);
     assign_val('d`test_so19 , 2'b1X);
     assign_val('d`test_si20 , 2'b0X);
     assign_val('d`test_so20 , 2'b1X);
     assign_val('d`test_si21 , 2'b0X);
     assign_val('d`test_so21 , 2'b1X);
     assign_val('d`test_si22 , 2'b0X);
     assign_val('d`test_so22 , 2'b1X);
     assign_val('d`test_si23 , 2'b0X);
     assign_val('d`test_so23 , 2'b1X);
     assign_val('d`test_si24 , 2'b0X);
     assign_val('d`test_so24 , 2'b1X);
     assign_val('d`test_si25 , 2'b0X);
     assign_val('d`test_so25 , 2'b1X);
     assign_val('d`test_si26 , 2'b0X);
     assign_val('d`test_so26 , 2'b1X);
     assign_val('d`test_si27 , 2'b0X);
     assign_val('d`test_so27 , 2'b1X);
     assign_val('d`test_si28 , 2'b0X);
     assign_val('d`test_so28 , 2'b1X);
     assign_val('d`test_si29 , 2'b0X);
     assign_val('d`test_so29 , 2'b1X);
     assign_val('d`test_si30 , 2'b0X);
     assign_val('d`test_so30 , 2'b1X);
     assign_val('d`test_si31 , 2'b0X);
     assign_val('d`test_so31 , 2'b1X);
     assign_val('d`test_si32 , 2'b0X);
     assign_val('d`test_so32 , 2'b1X);
     assign_val('d`test_si33 , 2'b0X);
     assign_val('d`test_so33 , 2'b1X);
     assign_val('d`test_si34 , 2'b0X);
     assign_val('d`test_so34 , 2'b1X);
     assign_val('d`test_si35 , 2'b0X);
     assign_val('d`test_so35 , 2'b1X);
     assign_val('d`test_si36 , 2'b0X);
     assign_val('d`test_so36 , 2'b1X);
     assign_val('d`test_si37 , 2'b0X);
     assign_val('d`test_so37 , 2'b1X);
     assign_val('d`test_si38 , 2'b0X);
     assign_val('d`test_so38 , 2'b1X);
     assign_val('d`test_si39 , 2'b0X);
     assign_val('d`test_so39 , 2'b1X);
     assign_val('d`test_si40 , 2'b0X);
     assign_val('d`test_so40 , 2'b1X);
     assign_val('d`test_si41 , 2'b0X);
     assign_val('d`test_so41 , 2'b1X);
     assign_val('d`test_si42 , 2'b0X);
     assign_val('d`test_so42 , 2'b1X);
     assign_val('d`test_si43 , 2'b0X);
     assign_val('d`test_so43 , 2'b1X);
     assign_val('d`test_si44 , 2'b0X);
     assign_val('d`test_so44 , 2'b1X);
     assign_val('d`test_si45 , 2'b0X);
     assign_val('d`test_so45 , 2'b1X);
     assign_val('d`test_si46 , 2'b0X);
     assign_val('d`test_so46 , 2'b1X);
     assign_val('d`test_si47 , 2'b0X);
     assign_val('d`test_so47 , 2'b1X);

     assign_val('d`TEST_SE , 2'b01);
     assign_stmt(the_wft_id);

     if (xtb_sim_mode)      p_shift_0(idargs, valargs);
     else      shift_0(idargs, valargs, 0, 1);

     restore_context;
   end 
   endtask

   task shift_0 ; // load_unload
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     input integer stsci;
     input reg stroben;
   begin
    csci = stsci+0; prev_error = -2;
    while (csci < 6) begin
     fsci = csci;
     if (verbose >= 2) $display("XTB: shift %0d, at %0t ", csci, $time);
     resolve_wft(4);
     assign_val('d`_clk , 4'bZZ11);
         if (idargs[1] === 1'b1) begin 
           LOD=LOAD[0]; assign_val('d`TEST_SI1 , {1'b0, LOD[csci+0]});
         end
         if (idargs[2] === 1'b1) begin 
           LOD=LOAD[1]; assign_val('d`TEST_SI2 , {1'b0, LOD[csci+0]});
         end
         if (idargs[3] === 1'b1) begin 
           LOD=LOAD[2]; assign_val('d`TEST_SI3 , {1'b0, LOD[csci+0]});
         end
         if (idargs[4] === 1'b1) begin 
           LOD=LOAD[3]; assign_val('d`TEST_SI4 , {1'b0, LOD[csci+0]});
         end
         if (idargs[10] === 1'b1) begin 
           LOD=LOAD[4]; assign_val('d`test_si5 , {1'b0, LOD[csci+0]});
         end
         if (idargs[11] === 1'b1) begin 
           LOD=LOAD[5]; assign_val('d`test_si6 , {1'b0, LOD[csci+0]});
         end
         if (idargs[12] === 1'b1) begin 
           LOD=LOAD[6]; assign_val('d`test_si7 , {1'b0, LOD[csci+0]});
         end
         if (idargs[13] === 1'b1) begin 
           LOD=LOAD[7]; assign_val('d`test_si8 , {1'b0, LOD[csci+0]});
         end
         if (idargs[14] === 1'b1) begin 
           LOD=LOAD[8]; assign_val('d`test_si9 , {1'b0, LOD[csci+0]});
         end
         if (idargs[15] === 1'b1) begin 
           LOD=LOAD[9]; assign_val('d`test_si10 , {1'b0, LOD[csci+0]});
         end
         if (idargs[16] === 1'b1) begin 
           LOD=LOAD[10]; assign_val('d`test_si11 , {1'b0, LOD[csci+0]});
         end
         if (idargs[17] === 1'b1) begin 
           LOD=LOAD[11]; assign_val('d`test_si12 , {1'b0, LOD[csci+0]});
         end
         if (idargs[18] === 1'b1) begin 
           LOD=LOAD[12]; assign_val('d`test_si13 , {1'b0, LOD[csci+0]});
         end
         if (idargs[19] === 1'b1) begin 
           LOD=LOAD[13]; assign_val('d`test_si14 , {1'b0, LOD[csci+0]});
         end
         if (idargs[20] === 1'b1) begin 
           LOD=LOAD[14]; assign_val('d`test_si15 , {1'b0, LOD[csci+0]});
         end
         if (idargs[21] === 1'b1) begin 
           LOD=LOAD[15]; assign_val('d`test_si16 , {1'b0, LOD[csci+0]});
         end
         if (idargs[22] === 1'b1) begin 
           LOD=LOAD[16]; assign_val('d`test_si17 , {1'b0, LOD[csci+0]});
         end
         if (idargs[23] === 1'b1) begin 
           LOD=LOAD[17]; assign_val('d`test_si18 , {1'b0, LOD[csci+0]});
         end
         if (idargs[24] === 1'b1) begin 
           LOD=LOAD[18]; assign_val('d`test_si19 , {1'b0, LOD[csci+0]});
         end
         if (idargs[25] === 1'b1) begin 
           LOD=LOAD[19]; assign_val('d`test_si20 , {1'b0, LOD[csci+0]});
         end
         if (idargs[26] === 1'b1) begin 
           LOD=LOAD[20]; assign_val('d`test_si21 , {1'b0, LOD[csci+0]});
         end
         if (idargs[27] === 1'b1) begin 
           LOD=LOAD[21]; assign_val('d`test_si22 , {1'b0, LOD[csci+0]});
         end
         if (idargs[28] === 1'b1) begin 
           LOD=LOAD[22]; assign_val('d`test_si23 , {1'b0, LOD[csci+0]});
         end
         if (idargs[29] === 1'b1) begin 
           LOD=LOAD[23]; assign_val('d`test_si24 , {1'b0, LOD[csci+0]});
         end
         if (idargs[30] === 1'b1) begin 
           LOD=LOAD[24]; assign_val('d`test_si25 , {1'b0, LOD[csci+0]});
         end
         if (idargs[31] === 1'b1) begin 
           LOD=LOAD[25]; assign_val('d`test_si26 , {1'b0, LOD[csci+0]});
         end
         if (idargs[32] === 1'b1) begin 
           LOD=LOAD[26]; assign_val('d`test_si27 , {1'b0, LOD[csci+0]});
         end
         if (idargs[33] === 1'b1) begin 
           LOD=LOAD[27]; assign_val('d`test_si28 , {1'b0, LOD[csci+0]});
         end
         if (idargs[34] === 1'b1) begin 
           LOD=LOAD[28]; assign_val('d`test_si29 , {1'b0, LOD[csci+0]});
         end
         if (idargs[35] === 1'b1) begin 
           LOD=LOAD[29]; assign_val('d`test_si30 , {1'b0, LOD[csci+0]});
         end
         if (idargs[36] === 1'b1) begin 
           LOD=LOAD[30]; assign_val('d`test_si31 , {1'b0, LOD[csci+0]});
         end
         if (idargs[37] === 1'b1) begin 
           LOD=LOAD[31]; assign_val('d`test_si32 , {1'b0, LOD[csci+0]});
         end
         if (idargs[38] === 1'b1) begin 
           LOD=LOAD[32]; assign_val('d`test_si33 , {1'b0, LOD[csci+0]});
         end
         if (idargs[39] === 1'b1) begin 
           LOD=LOAD[33]; assign_val('d`test_si34 , {1'b0, LOD[csci+0]});
         end
         if (idargs[40] === 1'b1) begin 
           LOD=LOAD[34]; assign_val('d`test_si35 , {1'b0, LOD[csci+0]});
         end
         if (idargs[41] === 1'b1) begin 
           LOD=LOAD[35]; assign_val('d`test_si36 , {1'b0, LOD[csci+0]});
         end
         if (idargs[42] === 1'b1) begin 
           LOD=LOAD[36]; assign_val('d`test_si37 , {1'b0, LOD[csci+0]});
         end
         if (idargs[43] === 1'b1) begin 
           LOD=LOAD[37]; assign_val('d`test_si38 , {1'b0, LOD[csci+0]});
         end
         if (idargs[44] === 1'b1) begin 
           LOD=LOAD[38]; assign_val('d`test_si39 , {1'b0, LOD[csci+0]});
         end
         if (idargs[45] === 1'b1) begin 
           LOD=LOAD[39]; assign_val('d`test_si40 , {1'b0, LOD[csci+0]});
         end
         if (idargs[46] === 1'b1) begin 
           LOD=LOAD[40]; assign_val('d`test_si41 , {1'b0, LOD[csci+0]});
         end
         if (idargs[47] === 1'b1) begin 
           LOD=LOAD[41]; assign_val('d`test_si42 , {1'b0, LOD[csci+0]});
         end
         if (idargs[48] === 1'b1) begin 
           LOD=LOAD[42]; assign_val('d`test_si43 , {1'b0, LOD[csci+0]});
         end
         if (idargs[49] === 1'b1) begin 
           LOD=LOAD[43]; assign_val('d`test_si44 , {1'b0, LOD[csci+0]});
         end
         if (idargs[50] === 1'b1) begin 
           LOD=LOAD[44]; assign_val('d`test_si45 , {1'b0, LOD[csci+0]});
         end
         if (idargs[51] === 1'b1) begin 
           LOD=LOAD[45]; assign_val('d`test_si46 , {1'b0, LOD[csci+0]});
         end
         if (idargs[52] === 1'b1) begin 
           LOD=LOAD[46]; assign_val('d`test_si47 , {1'b0, LOD[csci+0]});
         end
         if(stroben && idargs[53] === 1'b1) begin 
           UNL = UNLOAD[0]; assign_val('d`TEST_SO1 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[54] === 1'b1) begin 
           UNL = UNLOAD[1]; assign_val('d`TEST_SO2 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[55] === 1'b1) begin 
           UNL = UNLOAD[2]; assign_val('d`TEST_SO3 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[56] === 1'b1) begin 
           UNL = UNLOAD[3]; assign_val('d`TEST_SO4 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[57] === 1'b1) begin 
           UNL = UNLOAD[4]; assign_val('d`test_so5 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[58] === 1'b1) begin 
           UNL = UNLOAD[5]; assign_val('d`test_so6 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[59] === 1'b1) begin 
           UNL = UNLOAD[6]; assign_val('d`test_so7 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[60] === 1'b1) begin 
           UNL = UNLOAD[7]; assign_val('d`test_so8 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[61] === 1'b1) begin 
           UNL = UNLOAD[8]; assign_val('d`test_so9 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[62] === 1'b1) begin 
           UNL = UNLOAD[9]; assign_val('d`test_so10 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[63] === 1'b1) begin 
           UNL = UNLOAD[10]; assign_val('d`test_so11 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[64] === 1'b1) begin 
           UNL = UNLOAD[11]; assign_val('d`test_so12 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[65] === 1'b1) begin 
           UNL = UNLOAD[12]; assign_val('d`test_so13 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[66] === 1'b1) begin 
           UNL = UNLOAD[13]; assign_val('d`test_so14 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[67] === 1'b1) begin 
           UNL = UNLOAD[14]; assign_val('d`test_so15 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[68] === 1'b1) begin 
           UNL = UNLOAD[15]; assign_val('d`test_so16 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[69] === 1'b1) begin 
           UNL = UNLOAD[16]; assign_val('d`test_so17 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[70] === 1'b1) begin 
           UNL = UNLOAD[17]; assign_val('d`test_so18 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[71] === 1'b1) begin 
           UNL = UNLOAD[18]; assign_val('d`test_so19 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[72] === 1'b1) begin 
           UNL = UNLOAD[19]; assign_val('d`test_so20 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[73] === 1'b1) begin 
           UNL = UNLOAD[20]; assign_val('d`test_so21 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[74] === 1'b1) begin 
           UNL = UNLOAD[21]; assign_val('d`test_so22 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[75] === 1'b1) begin 
           UNL = UNLOAD[22]; assign_val('d`test_so23 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[76] === 1'b1) begin 
           UNL = UNLOAD[23]; assign_val('d`test_so24 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[77] === 1'b1) begin 
           UNL = UNLOAD[24]; assign_val('d`test_so25 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[78] === 1'b1) begin 
           UNL = UNLOAD[25]; assign_val('d`test_so26 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[79] === 1'b1) begin 
           UNL = UNLOAD[26]; assign_val('d`test_so27 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[80] === 1'b1) begin 
           UNL = UNLOAD[27]; assign_val('d`test_so28 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[81] === 1'b1) begin 
           UNL = UNLOAD[28]; assign_val('d`test_so29 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[82] === 1'b1) begin 
           UNL = UNLOAD[29]; assign_val('d`test_so30 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[83] === 1'b1) begin 
           UNL = UNLOAD[30]; assign_val('d`test_so31 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[84] === 1'b1) begin 
           UNL = UNLOAD[31]; assign_val('d`test_so32 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[85] === 1'b1) begin 
           UNL = UNLOAD[32]; assign_val('d`test_so33 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[86] === 1'b1) begin 
           UNL = UNLOAD[33]; assign_val('d`test_so34 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[87] === 1'b1) begin 
           UNL = UNLOAD[34]; assign_val('d`test_so35 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[88] === 1'b1) begin 
           UNL = UNLOAD[35]; assign_val('d`test_so36 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[89] === 1'b1) begin 
           UNL = UNLOAD[36]; assign_val('d`test_so37 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[90] === 1'b1) begin 
           UNL = UNLOAD[37]; assign_val('d`test_so38 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[91] === 1'b1) begin 
           UNL = UNLOAD[38]; assign_val('d`test_so39 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[92] === 1'b1) begin 
           UNL = UNLOAD[39]; assign_val('d`test_so40 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[93] === 1'b1) begin 
           UNL = UNLOAD[40]; assign_val('d`test_so41 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[94] === 1'b1) begin 
           UNL = UNLOAD[41]; assign_val('d`test_so42 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[95] === 1'b1) begin 
           UNL = UNLOAD[42]; assign_val('d`test_so43 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[96] === 1'b1) begin 
           UNL = UNLOAD[43]; assign_val('d`test_so44 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[97] === 1'b1) begin 
           UNL = UNLOAD[44]; assign_val('d`test_so45 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[98] === 1'b1) begin 
           UNL = UNLOAD[45]; assign_val('d`test_so46 , {1'b1,  UNL[csci+0]});
         end
         if(stroben && idargs[99] === 1'b1) begin 
           UNL = UNLOAD[46]; assign_val('d`test_so47 , {1'b1,  UNL[csci+0]});
         end
     assign_stmt(the_wft_id);
     csci = csci+1;
    end
   end
   endtask


   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT0[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[0][5] .Q , `XTB_DUT_HIER.DU.dm.\memory_reg[0][4] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][3] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][2] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][1] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][0] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT1[0:5] = {`XTB_DUT_HIER.snps_clk_chain_0.\U_shftreg_0/ff_0/q_reg .Q , `XTB_DUT_HIER.snps_clk_chain_0.\U_shftreg_0/ff_1/q_reg .Q , `XTB_DUT_HIER.snps_clk_chain_0.\U_shftreg_0/ff_2/q_reg .Q , `XTB_DUT_HIER.snps_clk_chain_0.\U_shftreg_0/ff_3/q_reg .Q , 1'b0 , 1'b0 };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT2[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[0][11] .Q , `XTB_DUT_HIER.DU.dm.\memory_reg[0][10] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][9] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][8] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][7] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][6] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT3[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[1][1] .Q , `XTB_DUT_HIER.DU.dm.\memory_reg[1][0] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][15] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][14] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][13] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[0][12] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT4[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[1][7] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][6] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][5] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][4] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][3] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][2] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT5[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[1][13] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][12] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][11] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][10] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][9] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][8] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT6[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[2][3] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][2] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][1] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][0] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][15] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[1][14] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT7[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[2][9] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][8] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][7] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][6] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][5] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][4] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT8[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[2][15] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][14] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][13] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][12] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][11] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[2][10] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT9[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[3][5] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][4] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][3] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][2] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][1] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][0] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT10[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[3][11] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][10] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][9] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][8] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][7] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][6] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT11[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[4][1] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][0] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][15] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][14] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][13] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[3][12] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT12[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[4][7] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][6] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][5] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][4] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][3] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][2] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT13[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[4][13] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][12] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][11] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][10] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][9] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][8] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT14[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[5][3] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][2] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][1] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][0] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][15] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[4][14] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT15[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[5][9] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][8] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][7] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][6] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][5] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][4] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT16[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[5][15] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][14] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][13] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][12] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][11] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[5][10] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT17[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[6][5] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][4] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][3] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][2] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][1] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][0] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT18[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[6][11] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][10] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][9] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][8] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][7] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][6] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT19[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[7][1] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][0] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][15] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][14] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][13] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[6][12] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT20[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[7][7] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][6] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][5] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][4] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][3] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][2] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT21[0:5] = {`XTB_DUT_HIER.DU.dm.\memory_reg[7][13] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][12] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][11] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][10] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][9] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][8] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT22[0:5] = {`XTB_DUT_HIER.DU.\pc_current_reg[3] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[2] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[1] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[0] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][15] .QN , `XTB_DUT_HIER.DU.dm.\memory_reg[7][14] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT23[0:5] = {`XTB_DUT_HIER.DU.\pc_current_reg[9] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[8] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[7] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[6] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[5] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[4] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT24[0:5] = {`XTB_DUT_HIER.DU.\pc_current_reg[15] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[14] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[13] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[12] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[11] .QN , `XTB_DUT_HIER.DU.\pc_current_reg[10] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT25[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][5] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][4] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][3] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][2] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][1] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][0] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT26[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][11] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][10] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][9] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][8] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][7] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][6] .Q };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT27[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][1] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][0] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][15] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][14] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][13] .Q , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][12] .Q };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT28[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][7] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][6] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][5] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][4] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][3] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][2] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT29[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][13] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][12] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][11] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][10] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][9] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][8] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT30[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][3] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][2] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][1] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][0] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][15] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][14] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT31[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][9] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][8] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][7] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][6] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][5] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][4] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT32[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][15] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][14] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][13] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][12] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][11] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][10] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT33[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][5] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][4] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][3] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][2] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][1] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][0] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT34[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][11] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][10] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][9] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][8] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][7] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][6] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT35[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][1] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][0] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][15] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][14] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][13] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][12] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT36[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][7] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][6] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][5] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][4] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][3] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][2] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT37[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][13] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][12] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][11] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][10] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][9] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][8] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT38[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][3] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][2] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][1] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][0] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][15] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][14] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT39[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][9] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][8] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][7] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][6] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][5] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][4] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT40[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][15] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][14] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][13] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][12] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][11] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][10] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT41[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][5] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][4] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][3] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][2] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][1] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][0] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT42[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][11] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][10] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][9] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][8] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][7] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][6] .QN };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT43[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][0] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][15] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][14] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][13] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][12] .QN , 1'b0 };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT44[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][5] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][4] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][3] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][2] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][1] .QN , 1'b0 };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT45[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][10] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][9] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][8] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][7] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][6] .QN , 1'b0 };
   end

   always /* ParallelShiftMode */ @(strobe_scells) begin
     CHAINOUT46[0:5] = {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][15] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][14] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][13] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][12] .QN , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][11] .QN , 1'b0 };
   end

   `define CELL0IN0 `XTB_DUT_HIER.DU.dm.\memory_reg[0][0] .SI
   `define CELL0IN1 `XTB_DUT_HIER.snps_clk_chain_0.\U_shftreg_0/ff_3/q_reg .D
   `define CELL0IN2 `XTB_DUT_HIER.DU.dm.\memory_reg[0][6] .SI
   `define CELL0IN3 `XTB_DUT_HIER.DU.dm.\memory_reg[0][12] .SI
   `define CELL0IN4 `XTB_DUT_HIER.DU.dm.\memory_reg[1][2] .SI
   `define CELL0IN5 `XTB_DUT_HIER.DU.dm.\memory_reg[1][8] .SI
   `define CELL0IN6 `XTB_DUT_HIER.DU.dm.\memory_reg[1][14] .SI
   `define CELL0IN7 `XTB_DUT_HIER.DU.dm.\memory_reg[2][4] .SI
   `define CELL0IN8 `XTB_DUT_HIER.DU.dm.\memory_reg[2][10] .SI
   `define CELL0IN9 `XTB_DUT_HIER.DU.dm.\memory_reg[3][0] .SI
   `define CELL0IN10 `XTB_DUT_HIER.DU.dm.\memory_reg[3][6] .SI
   `define CELL0IN11 `XTB_DUT_HIER.DU.dm.\memory_reg[3][12] .SI
   `define CELL0IN12 `XTB_DUT_HIER.DU.dm.\memory_reg[4][2] .SI
   `define CELL0IN13 `XTB_DUT_HIER.DU.dm.\memory_reg[4][8] .SI
   `define CELL0IN14 `XTB_DUT_HIER.DU.dm.\memory_reg[4][14] .SI
   `define CELL0IN15 `XTB_DUT_HIER.DU.dm.\memory_reg[5][4] .SI
   `define CELL0IN16 `XTB_DUT_HIER.DU.dm.\memory_reg[5][10] .SI
   `define CELL0IN17 `XTB_DUT_HIER.DU.dm.\memory_reg[6][0] .SI
   `define CELL0IN18 `XTB_DUT_HIER.DU.dm.\memory_reg[6][6] .SI
   `define CELL0IN19 `XTB_DUT_HIER.DU.dm.\memory_reg[6][12] .SI
   `define CELL0IN20 `XTB_DUT_HIER.DU.dm.\memory_reg[7][2] .SI
   `define CELL0IN21 `XTB_DUT_HIER.DU.dm.\memory_reg[7][8] .SI
   `define CELL0IN22 `XTB_DUT_HIER.DU.dm.\memory_reg[7][14] .SI
   `define CELL0IN23 `XTB_DUT_HIER.DU.\pc_current_reg[4] .SI
   `define CELL0IN24 `XTB_DUT_HIER.DU.\pc_current_reg[10] .SI
   `define CELL0IN25 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][0] .SI
   `define CELL0IN26 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][6] .SI
   `define CELL0IN27 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][12] .SI
   `define CELL0IN28 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][2] .SI
   `define CELL0IN29 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][8] .SI
   `define CELL0IN30 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][14] .SI
   `define CELL0IN31 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][4] .SI
   `define CELL0IN32 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][10] .SI
   `define CELL0IN33 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][0] .SI
   `define CELL0IN34 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][6] .SI
   `define CELL0IN35 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][12] .SI
   `define CELL0IN36 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][2] .SI
   `define CELL0IN37 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][8] .SI
   `define CELL0IN38 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][14] .SI
   `define CELL0IN39 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][4] .SI
   `define CELL0IN40 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][10] .SI
   `define CELL0IN41 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][0] .SI
   `define CELL0IN42 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][6] .SI
   `define CELL0IN43 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][12] .SI
   `define CELL0IN44 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][1] .SI
   `define CELL0IN45 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][6] .SI
   `define CELL0IN46 `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][11] .SI
   `define CHAININ0 {`XTB_DUT_HIER.DU.dm.\memory_reg[0][5] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][4] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][3] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][2] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][1] .SI ,  `CELL0IN0 }

   `define CHAININ1 {`XTB_DUT_HIER.snps_clk_chain_0.\U_shftreg_0/ff_0/q_reg .D , `XTB_DUT_HIER.snps_clk_chain_0.\U_shftreg_0/ff_1/q_reg .D , `XTB_DUT_HIER.snps_clk_chain_0.\U_shftreg_0/ff_2/q_reg .D ,  `CELL0IN1 }

   `define CHAININ2 {`XTB_DUT_HIER.DU.dm.\memory_reg[0][11] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][10] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][9] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][8] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][7] .SI ,  `CELL0IN2 }

   `define CHAININ3 {`XTB_DUT_HIER.DU.dm.\memory_reg[1][1] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][0] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][15] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][14] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[0][13] .SI ,  `CELL0IN3 }

   `define CHAININ4 {`XTB_DUT_HIER.DU.dm.\memory_reg[1][7] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][6] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][5] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][4] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][3] .SI ,  `CELL0IN4 }

   `define CHAININ5 {`XTB_DUT_HIER.DU.dm.\memory_reg[1][13] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][12] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][11] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][10] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][9] .SI ,  `CELL0IN5 }

   `define CHAININ6 {`XTB_DUT_HIER.DU.dm.\memory_reg[2][3] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][2] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][1] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][0] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[1][15] .SI ,  `CELL0IN6 }

   `define CHAININ7 {`XTB_DUT_HIER.DU.dm.\memory_reg[2][9] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][8] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][7] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][6] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][5] .SI ,  `CELL0IN7 }

   `define CHAININ8 {`XTB_DUT_HIER.DU.dm.\memory_reg[2][15] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][14] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][13] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][12] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[2][11] .SI ,  `CELL0IN8 }

   `define CHAININ9 {`XTB_DUT_HIER.DU.dm.\memory_reg[3][5] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][4] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][3] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][2] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][1] .SI ,  `CELL0IN9 }

   `define CHAININ10 {`XTB_DUT_HIER.DU.dm.\memory_reg[3][11] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][10] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][9] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][8] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][7] .SI ,  `CELL0IN10 }

   `define CHAININ11 {`XTB_DUT_HIER.DU.dm.\memory_reg[4][1] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][0] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][15] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][14] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[3][13] .SI ,  `CELL0IN11 }

   `define CHAININ12 {`XTB_DUT_HIER.DU.dm.\memory_reg[4][7] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][6] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][5] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][4] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][3] .SI ,  `CELL0IN12 }

   `define CHAININ13 {`XTB_DUT_HIER.DU.dm.\memory_reg[4][13] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][12] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][11] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][10] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][9] .SI ,  `CELL0IN13 }

   `define CHAININ14 {`XTB_DUT_HIER.DU.dm.\memory_reg[5][3] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][2] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][1] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][0] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[4][15] .SI ,  `CELL0IN14 }

   `define CHAININ15 {`XTB_DUT_HIER.DU.dm.\memory_reg[5][9] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][8] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][7] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][6] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][5] .SI ,  `CELL0IN15 }

   `define CHAININ16 {`XTB_DUT_HIER.DU.dm.\memory_reg[5][15] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][14] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][13] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][12] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[5][11] .SI ,  `CELL0IN16 }

   `define CHAININ17 {`XTB_DUT_HIER.DU.dm.\memory_reg[6][5] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][4] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][3] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][2] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][1] .SI ,  `CELL0IN17 }

   `define CHAININ18 {`XTB_DUT_HIER.DU.dm.\memory_reg[6][11] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][10] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][9] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][8] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][7] .SI ,  `CELL0IN18 }

   `define CHAININ19 {`XTB_DUT_HIER.DU.dm.\memory_reg[7][1] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][0] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][15] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][14] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[6][13] .SI ,  `CELL0IN19 }

   `define CHAININ20 {`XTB_DUT_HIER.DU.dm.\memory_reg[7][7] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][6] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][5] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][4] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][3] .SI ,  `CELL0IN20 }

   `define CHAININ21 {`XTB_DUT_HIER.DU.dm.\memory_reg[7][13] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][12] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][11] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][10] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][9] .SI ,  `CELL0IN21 }

   `define CHAININ22 {`XTB_DUT_HIER.DU.\pc_current_reg[3] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[2] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[1] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[0] .SI , `XTB_DUT_HIER.DU.dm.\memory_reg[7][15] .SI ,  `CELL0IN22 }

   `define CHAININ23 {`XTB_DUT_HIER.DU.\pc_current_reg[9] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[8] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[7] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[6] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[5] .SI ,  `CELL0IN23 }

   `define CHAININ24 {`XTB_DUT_HIER.DU.\pc_current_reg[15] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[14] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[13] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[12] .SI , `XTB_DUT_HIER.DU.\pc_current_reg[11] .SI ,  `CELL0IN24 }

   `define CHAININ25 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][5] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][4] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][3] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][2] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][1] .SI ,  `CELL0IN25 }

   `define CHAININ26 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][11] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][10] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][9] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][8] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][7] .SI ,  `CELL0IN26 }

   `define CHAININ27 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][1] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][0] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][15] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][14] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[0][13] .SI ,  `CELL0IN27 }

   `define CHAININ28 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][7] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][6] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][5] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][4] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][3] .SI ,  `CELL0IN28 }

   `define CHAININ29 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][13] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][12] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][11] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][10] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][9] .SI ,  `CELL0IN29 }

   `define CHAININ30 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][3] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][2] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][1] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][0] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[1][15] .SI ,  `CELL0IN30 }

   `define CHAININ31 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][9] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][8] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][7] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][6] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][5] .SI ,  `CELL0IN31 }

   `define CHAININ32 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][15] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][14] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][13] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][12] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[2][11] .SI ,  `CELL0IN32 }

   `define CHAININ33 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][5] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][4] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][3] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][2] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][1] .SI ,  `CELL0IN33 }

   `define CHAININ34 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][11] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][10] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][9] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][8] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][7] .SI ,  `CELL0IN34 }

   `define CHAININ35 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][1] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][0] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][15] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][14] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[3][13] .SI ,  `CELL0IN35 }

   `define CHAININ36 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][7] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][6] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][5] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][4] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][3] .SI ,  `CELL0IN36 }

   `define CHAININ37 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][13] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][12] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][11] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][10] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][9] .SI ,  `CELL0IN37 }

   `define CHAININ38 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][3] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][2] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][1] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][0] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[4][15] .SI ,  `CELL0IN38 }

   `define CHAININ39 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][9] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][8] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][7] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][6] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][5] .SI ,  `CELL0IN39 }

   `define CHAININ40 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][15] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][14] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][13] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][12] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[5][11] .SI ,  `CELL0IN40 }

   `define CHAININ41 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][5] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][4] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][3] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][2] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][1] .SI ,  `CELL0IN41 }

   `define CHAININ42 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][11] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][10] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][9] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][8] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][7] .SI ,  `CELL0IN42 }

   `define CHAININ43 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][0] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][15] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][14] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[6][13] .SI ,  `CELL0IN43 }

   `define CHAININ44 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][5] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][4] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][3] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][2] .SI ,  `CELL0IN44 }

   `define CHAININ45 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][10] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][9] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][8] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][7] .SI ,  `CELL0IN45 }

   `define CHAININ46 {`XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][15] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][14] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][13] .SI , `XTB_DUT_HIER.DU.reg_file.\reg_array_reg[7][12] .SI ,  `CELL0IN46 }


   task p_shift_0 ;
     input reg [SIG_IDS-1:0] idargs;
     input reg [2*CUM_WIDTH-1:0] valargs;
     integer i, j;
   begin
     if (~(idargs[103] | idargs[1] | idargs[2] | idargs[3] | idargs[4] | idargs[10] | idargs[11] | idargs[12] | idargs[13] | idargs[14] | idargs[15] | idargs[16] | idargs[17] | idargs[18] | idargs[19] | idargs[20] | idargs[21] | idargs[22] | idargs[23] | idargs[24] | idargs[25] | idargs[26] | idargs[27] | idargs[28] | idargs[29] | idargs[30] | idargs[31] | idargs[32] | idargs[33] | idargs[34] | idargs[35] | idargs[36] | idargs[37] | idargs[38] | idargs[39] | idargs[40] | idargs[41] | idargs[42] | idargs[43] | idargs[44] | idargs[45] | idargs[46] | idargs[47] | idargs[48] | idargs[49] | idargs[50] | idargs[51] | idargs[52] | idargs[106] | idargs[53] | idargs[54] | idargs[55] | idargs[56] | idargs[57] | idargs[58] | idargs[59] | idargs[60] | idargs[61] | idargs[62] | idargs[63] | idargs[64] | idargs[65] | idargs[66] | idargs[67] | idargs[68] | idargs[69] | idargs[70] | idargs[71] | idargs[72] | idargs[73] | idargs[74] | idargs[75] | idargs[76] | idargs[77] | idargs[78] | idargs[79] | idargs[80] | idargs[81] | idargs[82] | idargs[83] | idargs[84] | idargs[85] | idargs[86] | idargs[87] | idargs[88] | idargs[89] | idargs[90] | idargs[91] | idargs[92] | idargs[93] | idargs[94] | idargs[95] | idargs[96] | idargs[97] | idargs[98] | idargs[99] )) 
       disable p_shift_0 ; 
     if (SSHIFTS < MAXCHLEN) begin
         if (verbose >= 2) $display("XTB: (parallel) shift, at %0t  ", $time);
         resolve_wft(4);
     fork 
       begin: b1 
         #40 ;
         -> strobe_scells;
         repeat (SYNC_LATENCY) #0;
         if (idargs[53] === 1'b1) begin 
           measure_chain_out('d0);
         end
         if (idargs[54] === 1'b1) begin 
           measure_chain_out('d1);
         end
         if (idargs[55] === 1'b1) begin 
           measure_chain_out('d2);
         end
         if (idargs[56] === 1'b1) begin 
           measure_chain_out('d3);
         end
         if (idargs[57] === 1'b1) begin 
           measure_chain_out('d4);
         end
         if (idargs[58] === 1'b1) begin 
           measure_chain_out('d5);
         end
         if (idargs[59] === 1'b1) begin 
           measure_chain_out('d6);
         end
         if (idargs[60] === 1'b1) begin 
           measure_chain_out('d7);
         end
         if (idargs[61] === 1'b1) begin 
           measure_chain_out('d8);
         end
         if (idargs[62] === 1'b1) begin 
           measure_chain_out('d9);
         end
         if (idargs[63] === 1'b1) begin 
           measure_chain_out('d10);
         end
         if (idargs[64] === 1'b1) begin 
           measure_chain_out('d11);
         end
         if (idargs[65] === 1'b1) begin 
           measure_chain_out('d12);
         end
         if (idargs[66] === 1'b1) begin 
           measure_chain_out('d13);
         end
         if (idargs[67] === 1'b1) begin 
           measure_chain_out('d14);
         end
         if (idargs[68] === 1'b1) begin 
           measure_chain_out('d15);
         end
         if (idargs[69] === 1'b1) begin 
           measure_chain_out('d16);
         end
         if (idargs[70] === 1'b1) begin 
           measure_chain_out('d17);
         end
         if (idargs[71] === 1'b1) begin 
           measure_chain_out('d18);
         end
         if (idargs[72] === 1'b1) begin 
           measure_chain_out('d19);
         end
         if (idargs[73] === 1'b1) begin 
           measure_chain_out('d20);
         end
         if (idargs[74] === 1'b1) begin 
           measure_chain_out('d21);
         end
         if (idargs[75] === 1'b1) begin 
           measure_chain_out('d22);
         end
         if (idargs[76] === 1'b1) begin 
           measure_chain_out('d23);
         end
         if (idargs[77] === 1'b1) begin 
           measure_chain_out('d24);
         end
         if (idargs[78] === 1'b1) begin 
           measure_chain_out('d25);
         end
         if (idargs[79] === 1'b1) begin 
           measure_chain_out('d26);
         end
         if (idargs[80] === 1'b1) begin 
           measure_chain_out('d27);
         end
         if (idargs[81] === 1'b1) begin 
           measure_chain_out('d28);
         end
         if (idargs[82] === 1'b1) begin 
           measure_chain_out('d29);
         end
         if (idargs[83] === 1'b1) begin 
           measure_chain_out('d30);
         end
         if (idargs[84] === 1'b1) begin 
           measure_chain_out('d31);
         end
         if (idargs[85] === 1'b1) begin 
           measure_chain_out('d32);
         end
         if (idargs[86] === 1'b1) begin 
           measure_chain_out('d33);
         end
         if (idargs[87] === 1'b1) begin 
           measure_chain_out('d34);
         end
         if (idargs[88] === 1'b1) begin 
           measure_chain_out('d35);
         end
         if (idargs[89] === 1'b1) begin 
           measure_chain_out('d36);
         end
         if (idargs[90] === 1'b1) begin 
           measure_chain_out('d37);
         end
         if (idargs[91] === 1'b1) begin 
           measure_chain_out('d38);
         end
         if (idargs[92] === 1'b1) begin 
           measure_chain_out('d39);
         end
         if (idargs[93] === 1'b1) begin 
           measure_chain_out('d40);
         end
         if (idargs[94] === 1'b1) begin 
           measure_chain_out('d41);
         end
         if (idargs[95] === 1'b1) begin 
           measure_chain_out('d42);
         end
         if (idargs[96] === 1'b1) begin 
           measure_chain_out('d43);
         end
         if (idargs[97] === 1'b1) begin 
           measure_chain_out('d44);
         end
         if (idargs[98] === 1'b1) begin 
           measure_chain_out('d45);
         end
         if (idargs[99] === 1'b1) begin 
           measure_chain_out('d46);
         end
         if (idargs[1] === 1'b1) begin
           LOD0=(LOAD[0] >> SSHIFTS) ^ CH_INPINV[0];
         end
         if (idargs[2] === 1'b1) begin
           LOD1=(LOAD[1] >> SSHIFTS) ^ CH_INPINV[1];
         end
         if (idargs[3] === 1'b1) begin
           LOD2=(LOAD[2] >> SSHIFTS) ^ CH_INPINV[2];
         end
         if (idargs[4] === 1'b1) begin
           LOD3=(LOAD[3] >> SSHIFTS) ^ CH_INPINV[3];
         end
         if (idargs[10] === 1'b1) begin
           LOD4=(LOAD[4] >> SSHIFTS) ^ CH_INPINV[4];
         end
         if (idargs[11] === 1'b1) begin
           LOD5=(LOAD[5] >> SSHIFTS) ^ CH_INPINV[5];
         end
         if (idargs[12] === 1'b1) begin
           LOD6=(LOAD[6] >> SSHIFTS) ^ CH_INPINV[6];
         end
         if (idargs[13] === 1'b1) begin
           LOD7=(LOAD[7] >> SSHIFTS) ^ CH_INPINV[7];
         end
         if (idargs[14] === 1'b1) begin
           LOD8=(LOAD[8] >> SSHIFTS) ^ CH_INPINV[8];
         end
         if (idargs[15] === 1'b1) begin
           LOD9=(LOAD[9] >> SSHIFTS) ^ CH_INPINV[9];
         end
         if (idargs[16] === 1'b1) begin
           LOD10=(LOAD[10] >> SSHIFTS) ^ CH_INPINV[10];
         end
         if (idargs[17] === 1'b1) begin
           LOD11=(LOAD[11] >> SSHIFTS) ^ CH_INPINV[11];
         end
         if (idargs[18] === 1'b1) begin
           LOD12=(LOAD[12] >> SSHIFTS) ^ CH_INPINV[12];
         end
         if (idargs[19] === 1'b1) begin
           LOD13=(LOAD[13] >> SSHIFTS) ^ CH_INPINV[13];
         end
         if (idargs[20] === 1'b1) begin
           LOD14=(LOAD[14] >> SSHIFTS) ^ CH_INPINV[14];
         end
         if (idargs[21] === 1'b1) begin
           LOD15=(LOAD[15] >> SSHIFTS) ^ CH_INPINV[15];
         end
         if (idargs[22] === 1'b1) begin
           LOD16=(LOAD[16] >> SSHIFTS) ^ CH_INPINV[16];
         end
         if (idargs[23] === 1'b1) begin
           LOD17=(LOAD[17] >> SSHIFTS) ^ CH_INPINV[17];
         end
         if (idargs[24] === 1'b1) begin
           LOD18=(LOAD[18] >> SSHIFTS) ^ CH_INPINV[18];
         end
         if (idargs[25] === 1'b1) begin
           LOD19=(LOAD[19] >> SSHIFTS) ^ CH_INPINV[19];
         end
         if (idargs[26] === 1'b1) begin
           LOD20=(LOAD[20] >> SSHIFTS) ^ CH_INPINV[20];
         end
         if (idargs[27] === 1'b1) begin
           LOD21=(LOAD[21] >> SSHIFTS) ^ CH_INPINV[21];
         end
         if (idargs[28] === 1'b1) begin
           LOD22=(LOAD[22] >> SSHIFTS) ^ CH_INPINV[22];
         end
         if (idargs[29] === 1'b1) begin
           LOD23=(LOAD[23] >> SSHIFTS) ^ CH_INPINV[23];
         end
         if (idargs[30] === 1'b1) begin
           LOD24=(LOAD[24] >> SSHIFTS) ^ CH_INPINV[24];
         end
         if (idargs[31] === 1'b1) begin
           LOD25=(LOAD[25] >> SSHIFTS) ^ CH_INPINV[25];
         end
         if (idargs[32] === 1'b1) begin
           LOD26=(LOAD[26] >> SSHIFTS) ^ CH_INPINV[26];
         end
         if (idargs[33] === 1'b1) begin
           LOD27=(LOAD[27] >> SSHIFTS) ^ CH_INPINV[27];
         end
         if (idargs[34] === 1'b1) begin
           LOD28=(LOAD[28] >> SSHIFTS) ^ CH_INPINV[28];
         end
         if (idargs[35] === 1'b1) begin
           LOD29=(LOAD[29] >> SSHIFTS) ^ CH_INPINV[29];
         end
         if (idargs[36] === 1'b1) begin
           LOD30=(LOAD[30] >> SSHIFTS) ^ CH_INPINV[30];
         end
         if (idargs[37] === 1'b1) begin
           LOD31=(LOAD[31] >> SSHIFTS) ^ CH_INPINV[31];
         end
         if (idargs[38] === 1'b1) begin
           LOD32=(LOAD[32] >> SSHIFTS) ^ CH_INPINV[32];
         end
         if (idargs[39] === 1'b1) begin
           LOD33=(LOAD[33] >> SSHIFTS) ^ CH_INPINV[33];
         end
         if (idargs[40] === 1'b1) begin
           LOD34=(LOAD[34] >> SSHIFTS) ^ CH_INPINV[34];
         end
         if (idargs[41] === 1'b1) begin
           LOD35=(LOAD[35] >> SSHIFTS) ^ CH_INPINV[35];
         end
         if (idargs[42] === 1'b1) begin
           LOD36=(LOAD[36] >> SSHIFTS) ^ CH_INPINV[36];
         end
         if (idargs[43] === 1'b1) begin
           LOD37=(LOAD[37] >> SSHIFTS) ^ CH_INPINV[37];
         end
         if (idargs[44] === 1'b1) begin
           LOD38=(LOAD[38] >> SSHIFTS) ^ CH_INPINV[38];
         end
         if (idargs[45] === 1'b1) begin
           LOD39=(LOAD[39] >> SSHIFTS) ^ CH_INPINV[39];
         end
         if (idargs[46] === 1'b1) begin
           LOD40=(LOAD[40] >> SSHIFTS) ^ CH_INPINV[40];
         end
         if (idargs[47] === 1'b1) begin
           LOD41=(LOAD[41] >> SSHIFTS) ^ CH_INPINV[41];
         end
         if (idargs[48] === 1'b1) begin
           LOD42=(LOAD[42] >> SSHIFTS) ^ CH_INPINV[42];
         end
         if (idargs[49] === 1'b1) begin
           LOD43=(LOAD[43] >> SSHIFTS) ^ CH_INPINV[43];
         end
         if (idargs[50] === 1'b1) begin
           LOD44=(LOAD[44] >> SSHIFTS) ^ CH_INPINV[44];
         end
         if (idargs[51] === 1'b1) begin
           LOD45=(LOAD[45] >> SSHIFTS) ^ CH_INPINV[45];
         end
         if (idargs[52] === 1'b1) begin
           LOD46=(LOAD[46] >> SSHIFTS) ^ CH_INPINV[46];
         end

           ->force_scells; 
         #0;
       end 
       begin: b2
         assign_val('d`_clk , 4'bZZ11);
         assign_stmt(the_wft_id);
       end 
     join 

     ->release_scells; //aa

         #0;
         if (sertmg == 1) begin
           v_count = v_count + PARSERINC - SSHIFTS - 1;
           for (i = 0; i < PARSERINC - SSHIFTS - 1; i = i+1)
             complete_cycle(the_wft_id);
         end
         if (SSHIFTS > 0) shift_0(idargs, valargs, MAXCHLEN-SSHIFTS, 0) ; 

     end 
     else begin 
         shift_0(idargs, valargs, 0, 1);
     end
   end
   endtask


   always /* ParallelShiftMode */ @(force_scells) begin 
           force `CHAININ0 = LOD0;
           force `CHAININ1 = LOD1;
           force `CHAININ2 = LOD2;
           force `CHAININ3 = LOD3;
           force `CHAININ4 = LOD4;
           force `CHAININ5 = LOD5;
           force `CHAININ6 = LOD6;
           force `CHAININ7 = LOD7;
           force `CHAININ8 = LOD8;
           force `CHAININ9 = LOD9;
           force `CHAININ10 = LOD10;
           force `CHAININ11 = LOD11;
           force `CHAININ12 = LOD12;
           force `CHAININ13 = LOD13;
           force `CHAININ14 = LOD14;
           force `CHAININ15 = LOD15;
           force `CHAININ16 = LOD16;
           force `CHAININ17 = LOD17;
           force `CHAININ18 = LOD18;
           force `CHAININ19 = LOD19;
           force `CHAININ20 = LOD20;
           force `CHAININ21 = LOD21;
           force `CHAININ22 = LOD22;
           force `CHAININ23 = LOD23;
           force `CHAININ24 = LOD24;
           force `CHAININ25 = LOD25;
           force `CHAININ26 = LOD26;
           force `CHAININ27 = LOD27;
           force `CHAININ28 = LOD28;
           force `CHAININ29 = LOD29;
           force `CHAININ30 = LOD30;
           force `CHAININ31 = LOD31;
           force `CHAININ32 = LOD32;
           force `CHAININ33 = LOD33;
           force `CHAININ34 = LOD34;
           force `CHAININ35 = LOD35;
           force `CHAININ36 = LOD36;
           force `CHAININ37 = LOD37;
           force `CHAININ38 = LOD38;
           force `CHAININ39 = LOD39;
           force `CHAININ40 = LOD40;
           force `CHAININ41 = LOD41;
           force `CHAININ42 = LOD42;
           force `CHAININ43 = LOD43;
           force `CHAININ44 = LOD44;
           force `CHAININ45 = LOD45;
           force `CHAININ46 = LOD46;

   end


   always /* ParallelShiftMode */ @(release_scells) begin 
     release `CHAININ0;  release `CHAININ1;  release `CHAININ2;  release `CHAININ3;  release `CHAININ4;  release `CHAININ5;  release `CHAININ6; 
     release `CHAININ7;  release `CHAININ8;  release `CHAININ9;  release `CHAININ10;  release `CHAININ11;  release `CHAININ12;  release `CHAININ13; 
     release `CHAININ14;  release `CHAININ15;  release `CHAININ16;  release `CHAININ17;  release `CHAININ18;  release `CHAININ19;  release `CHAININ20; 
     release `CHAININ21;  release `CHAININ22;  release `CHAININ23;  release `CHAININ24;  release `CHAININ25;  release `CHAININ26;  release `CHAININ27; 
     release `CHAININ28;  release `CHAININ29;  release `CHAININ30;  release `CHAININ31;  release `CHAININ32;  release `CHAININ33;  release `CHAININ34; 
     release `CHAININ35;  release `CHAININ36;  release `CHAININ37;  release `CHAININ38;  release `CHAININ39;  release `CHAININ40;  release `CHAININ41; 
     release `CHAININ42;  release `CHAININ43;  release `CHAININ44;  release `CHAININ45;  release `CHAININ46; 
   end
   task skip_n_pat ; 
     input integer fpat; 
     integer cond ;
     integer nargs; 
    begin 
       cond = 1;
       while ( cond == 1 && cur_pat < fpat) begin
         memel = memall[data_i];
         opcode = memel[15:0];
         nargs = memel[22:16];
         if(  opcode == `WFTStmt || opcode == `SetForceSI || opcode == `EndGenLoopStmt || opcode == `GenLoopStmt || opcode == `SetValidStrobe || opcode == `SetLastReseed )begin  data_i = data_i -1 ; cond = 0; end 
         else if ( opcode == `IncPat || opcode == `SetPat) begin
           cur_pat = (opcode == `SetPat)?memel[43:16] :cur_pat + 1 ;
           if(fpat-1 > cur_pat) data_i = data_i + 1 ;
           else cond = 0 ;
         end
          else begin 
           nargs = nargs==0?1:nargs+1 ;
           data_i = data_i + nargs ;
         end
       end
    end
   endtask


   always @(start_part) begin: Internal_scan_occ_bypass_pattern__proc_unit

     integer nbpats, i;
     integer nargs, na;
     integer args;

     integer tdf;
     nbpats = 0; cur_pat = -1;
     loads = 1;

     end_pat = 0; v_count = 0; v_count_per_pat = 0; v_count_per_stmt = 0;
     nbfails = 0;
     prev_pat = -2; prev_error = -2; first_pat = 0;
     diagf = 0;
     if ( $value$plusargs ("tmax_diag_file=%s", diag_file )) diagm = diagm ? diagm : 1;
     if ( $value$plusargs ("tmax_test_data_file=%s", TDATA_FILE )) tdfm = 2;
     read_data;
     data_i = 1; 
     popcode = 'd0;

     if (diagm > 0) begin
       if (diagm > 2) begin
         $display("XTB Warning: wrong diagnosis mode (%0d), using default mode 1 (pattern based)", diagm);
         diagm = 1 ; 
       end  
       if ( $value$plusargs ("tmax_diag_file=%s", diag_file )) begin
         $display("XTB: Setting run-time option \"tmax_diag_file\" to %0s .",diag_file);
       end 
       else begin
         `ifdef tmax_diag_file 
         diag_file = `tmax_diag_file;
         `else  diag_file = "PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb.diag"; 
         `endif 
       end
       diagf = $fopen(diag_file);
       if (diagf == 0) begin
         $display("XTB Error: Unable to open diagnosis file %s (for writing). Exiting...", diag_file);
         $finish; 
       end
       if (verbose >= 1) $display("XTB: User requesting TetraMAX compliant diagnosis file: %0s", diag_file);
       $fdisplay(diagf, "// Serial scan error:       <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// USF Parallel scan error: <pat#> \t<pin_name> \t<shift_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// DSF Parallel scan error: <pat#> \t<chain_name> \t<cell_index> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Capture error:           <pat#> \t<pin_name> \t(<expected_value> <simulated_value>)");
       $fdisplay(diagf, "// Cycle based error:          C \t<pin_name> \t<vect_nbr> \t(<expected_value> <simulated_value>)\n\n");

     end 

     memel = memall[data_i]; 
     total_pats = memel[31:0];
     data_i=data_i+1;
     memel = memall[data_i];
     if(memel != `SIGCODE) begin
       $display("XTB Error: test data file %0s does not macth with testbench file. Exiting...", TDATA_FILE);
       $display("           (please check that the test data file is generated from the right STIL file).");
       $finish; 
     end 
     data_i = data_i+1;

     if (tdfm > 0) begin
      if (memall[data_i] > MDEPTH) begin
       $display("XTB Error: size of test data file %0s exceeding testbench memory allocation. Exiting...", TDATA_FILE);
       $display("           (please recompile using -pvalue+Risc_16_bit_test.MDEPTH=%0d).\n", memall[data_i]);
       $finish; 
      end
     end
      data_i = data_i+1; 

     last_pat = -1;

     n_pat_sim = -1;

     start_pat = -1;

     if (total_pats < 0 || |(total_pats) === 1'bx) begin
       $display("XTB Error: Inconsistent total number of patterns (%d). Exiting...",  total_pats);
       $finish;
     end

     if (verbose >= 1) $display("XTB: Total number of patterns  %0d",  total_pats); 
     if (last_pat == -1) last_pat = total_pats - 1;

     `ifdef tmax_n_pattern_sim
     last_pat=`tmax_n_pattern_sim;
     n_pat_sim=`tmax_n_pattern_sim;
     `endif

     `ifdef tmax_test_setup_only_once
     test_setup_only_once = 1;
     `endif

     `ifdef tmax_test_setup_mode
     test_setup_mode = `tmax_test_setup_mode;
     `endif

     xtb_sim_mode = 1;
     SSHIFTS = DFSHIFTS;

     ser_pats = 0;
     csim_op = -1;

     `ifdef tmax_serial
       if (~(`tmax_serial & 1'b1) == 1'b0) 
         ser_pats = last_pat + 1;
       else 
         ser_pats = `tmax_serial + 0;
       if (ser_pats > 0)
       csim_op = 0;
       `ifdef tmax_parallel 
         if (~(`tmax_parallel & 1'b1) == 1'b0) SSHIFTS = DFSHIFTS;
         else SSHIFTS = `tmax_parallel + 0; 
         if (ser_pats  >= last_pat + 1) begin	 
           csim_op = 2; 
         end 
         else if (ser_pats == 0)
           csim_op = 1;
       `endif
     `else 
       `ifdef tmax_parallel
         csim_op = 1;
         if (~(`tmax_parallel & 1'b1) == 1'b0) SSHIFTS = DFSHIFTS;
         else SSHIFTS = `tmax_parallel + 0; 
       `endif 
     `endif
     if (SSHIFTS < 0) begin
       $display("XTB Error: Passing negative value (%0d) of serial shifts in parallel mode. Exiting...",  SSHIFTS);
       $finish; 
     end

     process_rtops;
     `ifdef tmax_serial_timing 
       sertmg = 1;
       if (xtb_sim_mode == 1) $display("XTB: Parallel simulation (timing and vector) extended to match serial simulation");
     `else 
       sertmg = 0; 
     `endif


     $display("XTB: Starting %0s simulation of %0d pattern%s", xtb_sim_mode == 0 ? "serial" : "parallel", xtb_sim_mode == 0 ? ((ser_pats>last_pat || ser_pats==0)?(last_pat+1):ser_pats): last_pat + 1, (xtb_sim_mode!=0 || ser_pats>1)?"s":"");
     if (xtb_sim_mode) begin 
       $display("XTB: Using %0d serial shifts", SSHIFTS);
     end

     if (SSHIFTS >= MAXCHLEN)  begin 
       $display("XTB Warning: serial shifts (%0d) equals or exceeds max chain length (%0d). Performing full serial scan... ", SSHIFTS, MAXCHLEN); 
       xtb_sim_mode = 0;	
     end 

     if (diagm==2 && xtb_sim_mode==1)  begin 
       $display("XTB Warning: cannot display cycle-based diagnostic messages in parallel load mode simulation. Simulation will display pattern-based diagnostic messages."); 
       diagm = 1;	
     end 

     if (test_setup_mode == 2) begin
       if ($fopen("PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb_test_setup.save", "r") == 0) begin
         $display("XTB Error: Cannot find file \"PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb_test_setup.save\" (previous test_setup simulation)");
         $display("           Please generate first file \"PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb_test_setup.save\" using tmax_test_setup_mode=1. Exiting...");
         $finish(0); 
       end
       else begin
         $display("XTB: Restarting simulation from file \"PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb_test_setup.save\" (previous test_setup simulation)");
         $restart ("PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb_test_setup.save"); 
       end 
     end 
     while (cur_pat <= last_pat && end_pat != 1) begin : CONT_STMT
       memel = memall[data_i];
       opcode = memel[15:0];
       cur_stmt = -1;
       args = 'b0;
       if ((popcode == `EndGenTestSetupStmt) && (test_setup_mode == 1)) begin
         $display("XTB: Stopping simulation and exiting after test_setup (upon user request)...");
         $finish (0); 
       end
       case (opcode)
         'd`EndPat:  begin
                       cur_stmt = `EndPat;
                       end_pat = 1;
                     end
         'd`IncPat:  begin
                       cur_stmt = `IncPat;
                       if (rt_ops[7] != -1 && cur_pat < first_pat ) skip_n_pat(rt_ops[7]); 
                       else cur_pat = cur_pat + 1;
                       v_count_per_pat = 0;
                       nbpats = nbpats+1;

                     end
         'd`SetLastReseed:  begin
                       cur_stmt = `SetLastReseed;
                       `ifdef tmax_fast_reseed
                       set_last_reseed = memel[17:16];
                       `else
                       set_last_reseed = 1;
                       `endif
                     end
         'd`SetValidStrobe:  begin
                       cur_stmt = `SetValidStrobe;
                     end
         'd`SetForceSI:  begin
                       cur_stmt = `SetForceSI;
                     end
         'd`SetPat:  begin
                       cur_stmt = `SetPat;
                       v_count_per_pat = 0;
                       if (cur_pat==-1  && rt_ops[7] == -1) begin first_pat = memel[43:16]; cur_pat = first_pat; end
                       else cur_pat = memel[43:16];
                       if (start_pat==-1) start_pat = memel[43:16];
                       if (rt_ops[7] != -1 && cur_pat < first_pat ) skip_n_pat(rt_ops[7]); 
                       if(rt_ops[4] == -1) last_pat = last_pat + cur_pat; 
                       if (n_pat_sim>0) last_pat = start_pat+n_pat_sim;
                       nbpats = nbpats+1;  
                     end
         'd`WFTStmt: begin
                       cur_stmt = `WFTStmt;
                       resolve_wft(memel[18:16]);
                     end 
         'd`ConditionStmt, 'd`FixedStmt, 'd`VectorStmt: begin
           if (opcode == 'd`ConditionStmt) cur_stmt = 'd`ConditionStmt;
           else 	cur_stmt='d`VectorStmt;
           nargs = memel[22:16];
           na = 0;
           while (na<nargs) begin
             data_i = data_i + 1;
             memel = memall[data_i];
             assign_val(memel[SIG_IDS_W-1:0], memel[2*MAX_WIDTH+SIG_IDS_W-1:SIG_IDS_W]);
             na = na + 1;
           end
           if (opcode == `VectorStmt) assign_stmt(the_wft_id);
          end 
          'd`GenLoopStmt: begin: GenLoop_BLOCK
            cur_stmt = `GenLoopStmt;
            lp_count = 1;
            lp_addr = data_i;
            lp_max = memel[31:16];
            $display("\nXTB: starting loop statement with %0d iterations", lp_max); 
          end 
          'd`EndGenLoopStmt: begin: EndLoop_BLOCK
            cur_stmt = `EndGenLoopStmt;
            $display("\nXTB: loop iteration %0d/%0d done.", lp_count, lp_max);
            lp_count = lp_count+1;
            if (lp_count <= lp_max) begin
              data_i = lp_addr;
            end 
         end 
          'd`GenTestSetupStmt: begin: GenTestSetupStmt_BLOCK
              cur_stmt = `GenTestSetupStmt;
              if (verbose >= 2) $display("XTB: Starting generic test_setup Macro..., T=%0t, V=%0d", $time, v_count+1); 
         end

          'd`EndGenTestSetupStmt: begin: EndGenTestSetupStmt_BLOCK
              cur_stmt = `EndGenTestSetupStmt;
              test_setup_done = 'b1;
              if (verbose >= 2) $display("XTB: End of generic test_setup Macro.");
            if (test_setup_mode == 1 || test_setup_mode == 3) begin
             $display("XTB: Saving simulation state in \"PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb_test_setup.save\" file %0s", (test_setup_mode == 1)?"and exiting...":"...");
             $save ("PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb_test_setup.save"); 
             #1;
             if ( $value$plusargs ("tmax_test_data_file=%s", TDATA_FILE )) begin
               tdfm = 2;
               read_data;
             end
             if (test_setup_mode == 1)
               $value$plusargs ("tmax_test_setup_mode=%d", test_setup_mode);
           end  
         end
         'd`multiclock_captureStmt: begin: multiclock_capture_BLOCK
           cur_stmt = `multiclock_captureStmt;
           set_args(memel[22:16]);
             multiclock_capture(sid_args, sval_args);
         end 
         'd`allclock_captureStmt: begin: allclock_capture_BLOCK
           cur_stmt = `allclock_captureStmt;
           set_args(memel[22:16]);
             allclock_capture(sid_args, sval_args);
         end 
         'd`allclock_launchStmt: begin: allclock_launch_BLOCK
           cur_stmt = `allclock_launchStmt;
           set_args(memel[22:16]);
             allclock_launch(sid_args, sval_args);
         end 
         'd`allclock_launch_captureStmt: begin: allclock_launch_capture_BLOCK
           cur_stmt = `allclock_launch_captureStmt;
           set_args(memel[22:16]);
             allclock_launch_capture(sid_args, sval_args);
         end 
         'd`load_unloadStmt: begin: load_unload_BLOCK
           cur_stmt = `load_unloadStmt;
            na = 0; nargs = 'b0; sid_args = 'b0; sval_args = 'b0;
            nargs = memel[22:16];
            while (na < nargs) begin
              data_i = data_i + 1;
              memel = memall[data_i];
              if (memel[SIG_IDS_W-1:0] > SIG_IDS-1) begin
                $display("\nXTB Error: Passing wrong signal ID (%b), valid range is 1..%d. Exiting...", memel[SIG_IDS_W-1:0], SIG_IDS-1);
                $finish;
              end
              sid_args[memel[SIG_IDS_W-1:0]] = 1'b1;
              case (memel[SIG_IDS_W-1:0])
               'd`TEST_SI1: begin LOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`TEST_SI2: begin LOAD[1] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`TEST_SI3: begin LOAD[2] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`TEST_SI4: begin LOAD[3] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si5: begin LOAD[4] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si6: begin LOAD[5] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si7: begin LOAD[6] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si8: begin LOAD[7] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si9: begin LOAD[8] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si10: begin LOAD[9] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si11: begin LOAD[10] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si12: begin LOAD[11] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si13: begin LOAD[12] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si14: begin LOAD[13] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si15: begin LOAD[14] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si16: begin LOAD[15] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si17: begin LOAD[16] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si18: begin LOAD[17] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si19: begin LOAD[18] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si20: begin LOAD[19] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si21: begin LOAD[20] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si22: begin LOAD[21] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si23: begin LOAD[22] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si24: begin LOAD[23] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si25: begin LOAD[24] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si26: begin LOAD[25] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si27: begin LOAD[26] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si28: begin LOAD[27] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si29: begin LOAD[28] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si30: begin LOAD[29] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si31: begin LOAD[30] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si32: begin LOAD[31] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si33: begin LOAD[32] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si34: begin LOAD[33] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si35: begin LOAD[34] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si36: begin LOAD[35] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si37: begin LOAD[36] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si38: begin LOAD[37] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si39: begin LOAD[38] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si40: begin LOAD[39] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si41: begin LOAD[40] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si42: begin LOAD[41] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si43: begin LOAD[42] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si44: begin LOAD[43] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si45: begin LOAD[44] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si46: begin LOAD[45] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_si47: begin LOAD[46] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`TEST_SO1: begin UNLOAD[0] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`TEST_SO2: begin UNLOAD[1] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`TEST_SO3: begin UNLOAD[2] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`TEST_SO4: begin UNLOAD[3] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so5: begin UNLOAD[4] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so6: begin UNLOAD[5] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so7: begin UNLOAD[6] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so8: begin UNLOAD[7] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so9: begin UNLOAD[8] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so10: begin UNLOAD[9] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so11: begin UNLOAD[10] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so12: begin UNLOAD[11] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so13: begin UNLOAD[12] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so14: begin UNLOAD[13] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so15: begin UNLOAD[14] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so16: begin UNLOAD[15] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so17: begin UNLOAD[16] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so18: begin UNLOAD[17] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so19: begin UNLOAD[18] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so20: begin UNLOAD[19] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so21: begin UNLOAD[20] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so22: begin UNLOAD[21] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so23: begin UNLOAD[22] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so24: begin UNLOAD[23] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so25: begin UNLOAD[24] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so26: begin UNLOAD[25] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so27: begin UNLOAD[26] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so28: begin UNLOAD[27] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so29: begin UNLOAD[28] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so30: begin UNLOAD[29] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so31: begin UNLOAD[30] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so32: begin UNLOAD[31] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so33: begin UNLOAD[32] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so34: begin UNLOAD[33] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so35: begin UNLOAD[34] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so36: begin UNLOAD[35] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so37: begin UNLOAD[36] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so38: begin UNLOAD[37] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so39: begin UNLOAD[38] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so40: begin UNLOAD[39] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so41: begin UNLOAD[40] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so42: begin UNLOAD[41] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so43: begin UNLOAD[42] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so44: begin UNLOAD[43] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so45: begin UNLOAD[44] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so46: begin UNLOAD[45] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               'd`test_so47: begin UNLOAD[46] = memel[MAXCHLEN-1+SIG_IDS_W:SIG_IDS_W]; end 
               default: begin  
                 $display("\nXTB Error: Wrong signal argument (%0s) passed to load_unload procedure. Exiting...", SignalIDName[memel[SIG_IDS_W-1:0]]);
                 $finish; 
               end 
             endcase 
             na = na+1;
           end
             load_unload(sid_args, sval_args);
         end 
         default: begin $display("\nXTB Error: Unrecognized code %0h, @ inst %0d", opcode, data_i); $finish; end 
       endcase 
       data_i = data_i + 1;
       popcode = opcode;
       if (verbose >= 3) display_stmt(cur_stmt);
     end 
     $display("XTB: Simulation of %0d pattern%s completed with %0d mismatch%s (time: %0t, cycles: %0d)\n", nbpats+end_pat-1, (nbpats==1)?"":"s", nbfails, (nbfails==1)?"":"es", $time, v_count); 

     if (diagf) $fclose(diagf);
     ->end_part;
   end 


   task init_rtops;
     integer i;
   begin
     for (i=0; i<`NBRTOPS; i=i+1)
       rt_ops[i] = -1;
     RT_OPS [4] = "tmax_last_pat";
     RT_OPS [5] = "tmax_n_pattern_sim";
     RT_OPS [8] = "tmax_serial";
     RT_OPS [9] = "tmax_parallel";
     RT_OPS [0] = "tmax_msg";
     RT_OPS [1] = "tmax_rpt";
     RT_OPS [10] = "tmax_test_setup_only_once";
     RT_OPS [11] = "tmax_usf_debug_strobe_mode";
     RT_OPS [6] = "tmax_test_setup_mode";
     RT_OPS [7] = "tmax_first_pat";
     RT_OPS [2] = "tmax_diag_file";
     RT_OPS [3] = "tmax_n_error_stop";
   end 
   endtask

   task process_rtops;
     integer sim_op, p_mode;
     integer i, r;
   begin
     sim_op = -1;
     init_rtops;
     for (i=0; i<`NBRTOPS; i=i+1)
       r = $value$plusargs ({RT_OPS[i], "=%d"}, rt_ops[i]);
     if ((rt_ops[4] > -1))   begin
       last_pat =  rt_ops[4];
         display_ops ((rt_ops[4] > 0), last_pat, RT_OPS[4]);
         $display("XTB: User requesting ending simulation at pattern %0d",last_pat); 
        
     end
     if ((rt_ops[5] > -1)) begin last_pat = rt_ops[5]; n_pat_sim = rt_ops[5]; end
     if (rt_ops[4] == -1 && last_pat != total_pats-1) begin
       display_ops ((rt_ops[5] > 0), last_pat, RT_OPS[5]);
       $display("XTB: User requesting simulation of first %0d patterns", last_pat);
     end 
     if (rt_ops[4] == -1 && last_pat >= total_pats && total_pats > 1) begin
       $display("XTB Warning: Requested simulation patterns (%0d) exceeds total pattern count (%0d). Adjusting...", last_pat+1, total_pats);
       last_pat = total_pats-1;
     end 
     else if (last_pat < 0 && total_pats != 0)  begin 
       $display("XTB Error: User requesting simulating wrong number of patterns (%0d). Exiting... ", last_pat+1);
       $finish;
     end
     if ((rt_ops[8] > 0)) begin
       if (rt_ops[8]==0) ser_pats = last_pat + 1;
       else ser_pats = rt_ops[8];
       sim_op = 0;
     end 
     else if (rt_ops[8] != 0 &&  ($test$plusargs ("tmax_serial"))) begin
       ser_pats = last_pat + 1;
       rt_ops[8] = ser_pats;
       sim_op = 0;
     end
     if ((rt_ops[8]>0) || (csim_op==0 || csim_op==2)) display_ops ((rt_ops[8]>0), ser_pats, RT_OPS[8]);
     p_mode = ((rt_ops[9] > -1) || ($test$plusargs ("tmax_parallel")))?1:0;
     if (p_mode) begin
       SSHIFTS = (rt_ops[9] > -1)?rt_ops[9]:DFSHIFTS;
       if (sim_op == -1)
         sim_op = 1;
       else  if (ser_pats  < last_pat + 1)
         sim_op = 0;
       else 
         sim_op = 2;
     end 
     if (p_mode || (csim_op==1 || csim_op==2)) display_ops (p_mode, SSHIFTS, RT_OPS[9]);
     if (sim_op > -1)
       set_sim_ops (sim_op);
     else if (csim_op > -1)
       set_sim_ops (csim_op);
     if (rt_ops[0] > -1) begin
       verbose = rt_ops[0];
     end
     if (verbose != 0) 
       display_ops ((rt_ops[0]>-1), verbose, RT_OPS[0]);
     if (rt_ops[1] > -1) begin
       rep_pat =  rt_ops[1];
     end
     if (rep_pat != 5) 
       display_ops ((rt_ops[1]>-1), rep_pat, RT_OPS[1]);
     if (rt_ops[10] != 0 && ($test$plusargs ("tmax_test_setup_only_once"))) begin
       test_setup_only_once = 1;
       rt_ops[10] = 1;
     end
     if (test_setup_only_once > 0) begin
       display_ops ((rt_ops[10]>-1), test_setup_only_once, RT_OPS[10]);
     end
     if ((rt_ops[7] > -1)) begin
       first_pat =  rt_ops[7];
         display_ops ((rt_ops[7] > 0), first_pat, RT_OPS[7]);
         $display("XTB: User requesting starting simulation from pattern %0d.", first_pat);  
        
     end 
     if ($test$plusargs ("tmax_test_setup_mode")) begin
       test_setup_mode = rt_ops[6];
       if (test_setup_mode > 3 || test_setup_mode  < 0 ) begin
         $display("XTB Error: test_setup_mode set to wrong value (%0d), valid range is [0..3]. Exiting...",  test_setup_mode);
         $finish;
       end
       display_ops ((rt_ops[6] >= 0), test_setup_mode, RT_OPS[6]);
       if (test_setup_mode == 1)
         $display("XTB: User requesting saving and stopping simulation after test_setup");
       else if (test_setup_mode == 2)
         $display("XTB: User requesting skipping test_setup simulation ");
       else if (test_setup_mode == 3)
         $display("XTB: User requesting saving simulation after test_setup and continuing");
     end
   end 
   endtask

   task display_ops;
     input reg rt;
     input integer val;
     input reg [32*8:1] opname;
   begin
     $display("XTB: Setting %0s option \"%0s\" to %0d.", (rt==1)?"runtime":"compile-time",  opname, val);
   end 
   endtask

   task display_help;
   integer op;
   begin
     init_rtops;
     $display("\n\n\t\t----------------------- Runtime Help ------------------------------\n");
     $display("XTB: Usage is: <sim_exec> +opt1=val1 +opt2=val2...");
     $display("     where  <sim_exec> is the simulation exec name, and opt1 opt2 are available options and val1, val2 their corresponding values.");
     $display("     Available runtime options are:");
     op = 0;
     while (op < `NBRTOPS) begin
       $display("        +%0s", RT_OPS[op]);
       op = op + 1;
     end
       $display("        +tmax_test_data_file");
     $display("\n      E.g.: simv +tmax_serial=2 +tmax_msg=2, runs first 2 patterns in serial and remaining in parallel, and set the verbose msg level to 2.");
     $display("\n      E.g.: simv +tmax_test_data_file=\"myfile.dat\" , where myfile.dat is the new .dat file");
     $display("\n Note: Runtime options override corresponding compile-time options.");
     $display("\n       Please refer to the User's Guide for details regarding each option.");
     $display("\n\t\t-------------------------------------------------------------------\n");
   end 
   endtask

   task set_sim_ops;
     input integer smode;
   begin
     if (smode==0) begin 
       xtb_sim_mode = 0;
       $write("XTB: Enabling serial simulation for");
       if (ser_pats < last_pat + 1) begin
         if (ser_pats==1) $write(" the first pattern.\n");
         else $write(" first %0d patterns.\n", ser_pats);
       end else 
         $write(" all patterns.\n");
     end
     else if (smode==1) begin 
       $write("XTB: Enabling parallel simulation with %0d serial shift(s).\n", SSHIFTS);
       xtb_sim_mode = 1;
     end 
     else  if (smode==2) begin
       $display("XTB Warning: requesting full serial simulation and full parallel simulation in the same time. Performing default parallel simulation mode...");
       xtb_sim_mode = 1;
     end 
   end 
   endtask

   task check_max_error_limit;
     begin
     if( rt_ops[3] > -1 && nbfails == rt_ops[3])    finish_at_max_error;
   end
     endtask

   task finish_at_max_error;
     begin
     $display("XTB: Simulation of %0d pattern%s completed with %0d mismatch%s (time: %0t, cycles: %0d)\n", cur_pat-first_pat+1, (cur_pat-first_pat+1==1)?"":"s", nbfails, (nbfails==1)?"":"es", $time, v_count); 
     $finish(0);
     end
     endtask


   initial begin: Internal_scan_occ_bypass_pattern__init_unit

     `ifdef tmax_fsdb
       $fsdbDumpvars;
     `endif


     for (n=0; n<SIG_IDS; n=n+1) SignalIDWidth[n] = 0;
     SignalIDName[0] = "clk";
     SignalIDType[0] = 0; //clk
     SignalIDWidth[0] = 1; //clk
     SignalIDName[1] = "TEST_SI1";
     SignalIDType[1] = 0; //TEST_SI1
     SignalIDWidth[1] = 1; //TEST_SI1
     SignalIDName[2] = "TEST_SI2";
     SignalIDType[2] = 0; //TEST_SI2
     SignalIDWidth[2] = 1; //TEST_SI2
     SignalIDName[3] = "TEST_SI3";
     SignalIDType[3] = 0; //TEST_SI3
     SignalIDWidth[3] = 1; //TEST_SI3
     SignalIDName[4] = "TEST_SI4";
     SignalIDType[4] = 0; //TEST_SI4
     SignalIDWidth[4] = 1; //TEST_SI4
     SignalIDName[5] = "TEST_SE";
     SignalIDType[5] = 0; //TEST_SE
     SignalIDWidth[5] = 1; //TEST_SE
     SignalIDName[6] = "scan_clk";
     SignalIDType[6] = 0; //scan_clk
     SignalIDWidth[6] = 1; //scan_clk
     SignalIDName[7] = "SCAN_MODE";
     SignalIDType[7] = 0; //SCAN_MODE
     SignalIDWidth[7] = 1; //SCAN_MODE
     SignalIDName[8] = "pll_bypass_2";
     SignalIDType[8] = 0; //pll_bypass_2
     SignalIDWidth[8] = 1; //pll_bypass_2
     SignalIDName[9] = "pll_reset";
     SignalIDType[9] = 0; //pll_reset
     SignalIDWidth[9] = 1; //pll_reset
     SignalIDName[10] = "test_si5";
     SignalIDType[10] = 0; //test_si5
     SignalIDWidth[10] = 1; //test_si5
     SignalIDName[11] = "test_si6";
     SignalIDType[11] = 0; //test_si6
     SignalIDWidth[11] = 1; //test_si6
     SignalIDName[12] = "test_si7";
     SignalIDType[12] = 0; //test_si7
     SignalIDWidth[12] = 1; //test_si7
     SignalIDName[13] = "test_si8";
     SignalIDType[13] = 0; //test_si8
     SignalIDWidth[13] = 1; //test_si8
     SignalIDName[14] = "test_si9";
     SignalIDType[14] = 0; //test_si9
     SignalIDWidth[14] = 1; //test_si9
     SignalIDName[15] = "test_si10";
     SignalIDType[15] = 0; //test_si10
     SignalIDWidth[15] = 1; //test_si10
     SignalIDName[16] = "test_si11";
     SignalIDType[16] = 0; //test_si11
     SignalIDWidth[16] = 1; //test_si11
     SignalIDName[17] = "test_si12";
     SignalIDType[17] = 0; //test_si12
     SignalIDWidth[17] = 1; //test_si12
     SignalIDName[18] = "test_si13";
     SignalIDType[18] = 0; //test_si13
     SignalIDWidth[18] = 1; //test_si13
     SignalIDName[19] = "test_si14";
     SignalIDType[19] = 0; //test_si14
     SignalIDWidth[19] = 1; //test_si14
     SignalIDName[20] = "test_si15";
     SignalIDType[20] = 0; //test_si15
     SignalIDWidth[20] = 1; //test_si15
     SignalIDName[21] = "test_si16";
     SignalIDType[21] = 0; //test_si16
     SignalIDWidth[21] = 1; //test_si16
     SignalIDName[22] = "test_si17";
     SignalIDType[22] = 0; //test_si17
     SignalIDWidth[22] = 1; //test_si17
     SignalIDName[23] = "test_si18";
     SignalIDType[23] = 0; //test_si18
     SignalIDWidth[23] = 1; //test_si18
     SignalIDName[24] = "test_si19";
     SignalIDType[24] = 0; //test_si19
     SignalIDWidth[24] = 1; //test_si19
     SignalIDName[25] = "test_si20";
     SignalIDType[25] = 0; //test_si20
     SignalIDWidth[25] = 1; //test_si20
     SignalIDName[26] = "test_si21";
     SignalIDType[26] = 0; //test_si21
     SignalIDWidth[26] = 1; //test_si21
     SignalIDName[27] = "test_si22";
     SignalIDType[27] = 0; //test_si22
     SignalIDWidth[27] = 1; //test_si22
     SignalIDName[28] = "test_si23";
     SignalIDType[28] = 0; //test_si23
     SignalIDWidth[28] = 1; //test_si23
     SignalIDName[29] = "test_si24";
     SignalIDType[29] = 0; //test_si24
     SignalIDWidth[29] = 1; //test_si24
     SignalIDName[30] = "test_si25";
     SignalIDType[30] = 0; //test_si25
     SignalIDWidth[30] = 1; //test_si25
     SignalIDName[31] = "test_si26";
     SignalIDType[31] = 0; //test_si26
     SignalIDWidth[31] = 1; //test_si26
     SignalIDName[32] = "test_si27";
     SignalIDType[32] = 0; //test_si27
     SignalIDWidth[32] = 1; //test_si27
     SignalIDName[33] = "test_si28";
     SignalIDType[33] = 0; //test_si28
     SignalIDWidth[33] = 1; //test_si28
     SignalIDName[34] = "test_si29";
     SignalIDType[34] = 0; //test_si29
     SignalIDWidth[34] = 1; //test_si29
     SignalIDName[35] = "test_si30";
     SignalIDType[35] = 0; //test_si30
     SignalIDWidth[35] = 1; //test_si30
     SignalIDName[36] = "test_si31";
     SignalIDType[36] = 0; //test_si31
     SignalIDWidth[36] = 1; //test_si31
     SignalIDName[37] = "test_si32";
     SignalIDType[37] = 0; //test_si32
     SignalIDWidth[37] = 1; //test_si32
     SignalIDName[38] = "test_si33";
     SignalIDType[38] = 0; //test_si33
     SignalIDWidth[38] = 1; //test_si33
     SignalIDName[39] = "test_si34";
     SignalIDType[39] = 0; //test_si34
     SignalIDWidth[39] = 1; //test_si34
     SignalIDName[40] = "test_si35";
     SignalIDType[40] = 0; //test_si35
     SignalIDWidth[40] = 1; //test_si35
     SignalIDName[41] = "test_si36";
     SignalIDType[41] = 0; //test_si36
     SignalIDWidth[41] = 1; //test_si36
     SignalIDName[42] = "test_si37";
     SignalIDType[42] = 0; //test_si37
     SignalIDWidth[42] = 1; //test_si37
     SignalIDName[43] = "test_si38";
     SignalIDType[43] = 0; //test_si38
     SignalIDWidth[43] = 1; //test_si38
     SignalIDName[44] = "test_si39";
     SignalIDType[44] = 0; //test_si39
     SignalIDWidth[44] = 1; //test_si39
     SignalIDName[45] = "test_si40";
     SignalIDType[45] = 0; //test_si40
     SignalIDWidth[45] = 1; //test_si40
     SignalIDName[46] = "test_si41";
     SignalIDType[46] = 0; //test_si41
     SignalIDWidth[46] = 1; //test_si41
     SignalIDName[47] = "test_si42";
     SignalIDType[47] = 0; //test_si42
     SignalIDWidth[47] = 1; //test_si42
     SignalIDName[48] = "test_si43";
     SignalIDType[48] = 0; //test_si43
     SignalIDWidth[48] = 1; //test_si43
     SignalIDName[49] = "test_si44";
     SignalIDType[49] = 0; //test_si44
     SignalIDWidth[49] = 1; //test_si44
     SignalIDName[50] = "test_si45";
     SignalIDType[50] = 0; //test_si45
     SignalIDWidth[50] = 1; //test_si45
     SignalIDName[51] = "test_si46";
     SignalIDType[51] = 0; //test_si46
     SignalIDWidth[51] = 1; //test_si46
     SignalIDName[52] = "test_si47";
     SignalIDType[52] = 0; //test_si47
     SignalIDWidth[52] = 1; //test_si47
     SignalIDName[53] = "TEST_SO1";
     SignalIDType[53] = 1; //TEST_SO1
     SignalIDWidth[53] = 1; //TEST_SO1
     SignalIDName[54] = "TEST_SO2";
     SignalIDType[54] = 1; //TEST_SO2
     SignalIDWidth[54] = 1; //TEST_SO2
     SignalIDName[55] = "TEST_SO3";
     SignalIDType[55] = 1; //TEST_SO3
     SignalIDWidth[55] = 1; //TEST_SO3
     SignalIDName[56] = "TEST_SO4";
     SignalIDType[56] = 1; //TEST_SO4
     SignalIDWidth[56] = 1; //TEST_SO4
     SignalIDName[57] = "test_so5";
     SignalIDType[57] = 1; //test_so5
     SignalIDWidth[57] = 1; //test_so5
     SignalIDName[58] = "test_so6";
     SignalIDType[58] = 1; //test_so6
     SignalIDWidth[58] = 1; //test_so6
     SignalIDName[59] = "test_so7";
     SignalIDType[59] = 1; //test_so7
     SignalIDWidth[59] = 1; //test_so7
     SignalIDName[60] = "test_so8";
     SignalIDType[60] = 1; //test_so8
     SignalIDWidth[60] = 1; //test_so8
     SignalIDName[61] = "test_so9";
     SignalIDType[61] = 1; //test_so9
     SignalIDWidth[61] = 1; //test_so9
     SignalIDName[62] = "test_so10";
     SignalIDType[62] = 1; //test_so10
     SignalIDWidth[62] = 1; //test_so10
     SignalIDName[63] = "test_so11";
     SignalIDType[63] = 1; //test_so11
     SignalIDWidth[63] = 1; //test_so11
     SignalIDName[64] = "test_so12";
     SignalIDType[64] = 1; //test_so12
     SignalIDWidth[64] = 1; //test_so12
     SignalIDName[65] = "test_so13";
     SignalIDType[65] = 1; //test_so13
     SignalIDWidth[65] = 1; //test_so13
     SignalIDName[66] = "test_so14";
     SignalIDType[66] = 1; //test_so14
     SignalIDWidth[66] = 1; //test_so14
     SignalIDName[67] = "test_so15";
     SignalIDType[67] = 1; //test_so15
     SignalIDWidth[67] = 1; //test_so15
     SignalIDName[68] = "test_so16";
     SignalIDType[68] = 1; //test_so16
     SignalIDWidth[68] = 1; //test_so16
     SignalIDName[69] = "test_so17";
     SignalIDType[69] = 1; //test_so17
     SignalIDWidth[69] = 1; //test_so17
     SignalIDName[70] = "test_so18";
     SignalIDType[70] = 1; //test_so18
     SignalIDWidth[70] = 1; //test_so18
     SignalIDName[71] = "test_so19";
     SignalIDType[71] = 1; //test_so19
     SignalIDWidth[71] = 1; //test_so19
     SignalIDName[72] = "test_so20";
     SignalIDType[72] = 1; //test_so20
     SignalIDWidth[72] = 1; //test_so20
     SignalIDName[73] = "test_so21";
     SignalIDType[73] = 1; //test_so21
     SignalIDWidth[73] = 1; //test_so21
     SignalIDName[74] = "test_so22";
     SignalIDType[74] = 1; //test_so22
     SignalIDWidth[74] = 1; //test_so22
     SignalIDName[75] = "test_so23";
     SignalIDType[75] = 1; //test_so23
     SignalIDWidth[75] = 1; //test_so23
     SignalIDName[76] = "test_so24";
     SignalIDType[76] = 1; //test_so24
     SignalIDWidth[76] = 1; //test_so24
     SignalIDName[77] = "test_so25";
     SignalIDType[77] = 1; //test_so25
     SignalIDWidth[77] = 1; //test_so25
     SignalIDName[78] = "test_so26";
     SignalIDType[78] = 1; //test_so26
     SignalIDWidth[78] = 1; //test_so26
     SignalIDName[79] = "test_so27";
     SignalIDType[79] = 1; //test_so27
     SignalIDWidth[79] = 1; //test_so27
     SignalIDName[80] = "test_so28";
     SignalIDType[80] = 1; //test_so28
     SignalIDWidth[80] = 1; //test_so28
     SignalIDName[81] = "test_so29";
     SignalIDType[81] = 1; //test_so29
     SignalIDWidth[81] = 1; //test_so29
     SignalIDName[82] = "test_so30";
     SignalIDType[82] = 1; //test_so30
     SignalIDWidth[82] = 1; //test_so30
     SignalIDName[83] = "test_so31";
     SignalIDType[83] = 1; //test_so31
     SignalIDWidth[83] = 1; //test_so31
     SignalIDName[84] = "test_so32";
     SignalIDType[84] = 1; //test_so32
     SignalIDWidth[84] = 1; //test_so32
     SignalIDName[85] = "test_so33";
     SignalIDType[85] = 1; //test_so33
     SignalIDWidth[85] = 1; //test_so33
     SignalIDName[86] = "test_so34";
     SignalIDType[86] = 1; //test_so34
     SignalIDWidth[86] = 1; //test_so34
     SignalIDName[87] = "test_so35";
     SignalIDType[87] = 1; //test_so35
     SignalIDWidth[87] = 1; //test_so35
     SignalIDName[88] = "test_so36";
     SignalIDType[88] = 1; //test_so36
     SignalIDWidth[88] = 1; //test_so36
     SignalIDName[89] = "test_so37";
     SignalIDType[89] = 1; //test_so37
     SignalIDWidth[89] = 1; //test_so37
     SignalIDName[90] = "test_so38";
     SignalIDType[90] = 1; //test_so38
     SignalIDWidth[90] = 1; //test_so38
     SignalIDName[91] = "test_so39";
     SignalIDType[91] = 1; //test_so39
     SignalIDWidth[91] = 1; //test_so39
     SignalIDName[92] = "test_so40";
     SignalIDType[92] = 1; //test_so40
     SignalIDWidth[92] = 1; //test_so40
     SignalIDName[93] = "test_so41";
     SignalIDType[93] = 1; //test_so41
     SignalIDWidth[93] = 1; //test_so41
     SignalIDName[94] = "test_so42";
     SignalIDType[94] = 1; //test_so42
     SignalIDWidth[94] = 1; //test_so42
     SignalIDName[95] = "test_so43";
     SignalIDType[95] = 1; //test_so43
     SignalIDWidth[95] = 1; //test_so43
     SignalIDName[96] = "test_so44";
     SignalIDType[96] = 1; //test_so44
     SignalIDWidth[96] = 1; //test_so44
     SignalIDName[97] = "test_so45";
     SignalIDType[97] = 1; //test_so45
     SignalIDWidth[97] = 1; //test_so45
     SignalIDName[98] = "test_so46";
     SignalIDType[98] = 1; //test_so46
     SignalIDWidth[98] = 1; //test_so46
     SignalIDName[99] = "test_so47";
     SignalIDType[99] = 1; //test_so47
     SignalIDWidth[99] = 1; //test_so47
     SignalIDName[100] = "_pi";
     SignalIDType[100] = 3; //_pi
     SignalIDWidth[100] = 53; //_pi
     SignalIDName[101] = "all_inputs";
     SignalIDType[101] = 3; //all_inputs
     SignalIDWidth[101] = 53; //all_inputs
     SignalIDName[102] = "_po";
     SignalIDType[102] = 3; //_po
     SignalIDWidth[102] = 47; //_po
     SignalIDName[103] = "_si";
     SignalIDType[103] = 3; //_si
     SignalIDWidth[103] = 47; //_si
     SignalIDName[104] = "all_outputs";
     SignalIDType[104] = 3; //all_outputs
     SignalIDWidth[104] = 47; //all_outputs
     SignalIDName[105] = "_clk";
     SignalIDType[105] = 3; //_clk
     SignalIDWidth[105] = 2; //_clk
     SignalIDName[106] = "_so";
     SignalIDType[106] = 3; //_so
     SignalIDWidth[106] = 47; //_so
     WFTIDName[0] = "_multiclock_capture_WFT_";
     WFTIDName[1] = "_allclock_capture_WFT_";
     WFTIDName[2] = "_allclock_launch_WFT_";
     WFTIDName[3] = "_allclock_launch_capture_WFT_";
     WFTIDName[4] = "_default_WFT_";
     StmtNames[0] = "SetLastReseed";
     StmtNames[1] = "EndPat";
     StmtNames[2] = "IncPat";
     StmtNames[3] = "SetPat";
     StmtNames[4] = "WFTStmt";
     StmtNames[5] = "ConditionStmt";
     StmtNames[6] = "VectorStmt";
     StmtNames[7] = "FixedStmt";
     StmtNames[8] = "GenLoopStmt";
     StmtNames[9] = "EndGenLoopStmt";
     StmtNames[10] = "GenTestSetupStmt";
     StmtNames[11] = "EndGenTestSetupStmt";
     StmtNames[12] = "SetForceSI";
     StmtNames[13] = "SetValidStrobe";
     StmtNames[14] = "AnnotationStmt";
     StmtNames[15] = "SetWPack";
     StmtNames[16] = "SetRPack";
     StmtNames[17] = "multiclock_captureStmt";
     StmtNames[18] = "allclock_captureStmt";
     StmtNames[19] = "allclock_launchStmt";
     StmtNames[20] = "allclock_launch_captureStmt";
     StmtNames[21] = "load_unloadStmt";
     StmtNames[22] = "test_setupStmt";

     $display("%s",`MAXTB_H_S);
     $display("%s",`MAXTB_HEADER);
     $display("%s\n",`MAXTB_H_S);

     if ( $test$plusargs ("tmax_help") ) begin
       display_help;
       $finish(0);
     end

     $timeformat(-9,2," ns",19);

     `ifdef tmax_test_data_file 
       tdfm = 1;
       TDATA_FILE = `tmax_test_data_file ;
     `else
       tdfm = 0;
       TDATA_FILE = `TDATA_FILE ;
     `endif


     `ifdef tmax_diag_file 
       diagm = 1;
       diag_file = `tmax_diag_file ;
     `else
       tdfm = 0;
       diag_file = "" ;
     `endif

     `ifdef tmax_vcde
       $display("XTB: Dumping Extended VCD information in file \"PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb.vcd\"");
       $dumpports(`XTB_DUT_HIER, "PATTERNS/MAXTB/Risc_16_bit_SA_Internal_scan_parallel_max_tb.vcd");
     `endif

     `ifdef tmax_msg
       verbose = `tmax_msg ;
     `else
       verbose = 0 ;
     `endif

     `ifdef tmax_debug
     if (~(`tmax_debug & 1'b1) == 1'b0)
       debug = 1;
     else
       debug = `tmax_debug + 0 ;
     `else
     debug = 0 ;
     `endif

     `ifdef tmax_rpt
     rep_pat = `tmax_rpt ;
     `else
     rep_pat = 5 ;
     `endif

     test_setup_runs = 0;

     set_last_reseed = 1;

     test_setup_mode = 0;


     test_setup_done = 0;

     CH_NAMES[0] = "1";
     CH_PINS[0] = "TEST_SO1";
     CH_NAMES[1] = "2";
     CH_PINS[1] = "TEST_SO2";
     CH_NAMES[2] = "3";
     CH_PINS[2] = "TEST_SO3";
     CH_NAMES[3] = "4";
     CH_PINS[3] = "TEST_SO4";
     CH_NAMES[4] = "5";
     CH_PINS[4] = "test_so5";
     CH_NAMES[5] = "6";
     CH_PINS[5] = "test_so6";
     CH_NAMES[6] = "7";
     CH_PINS[6] = "test_so7";
     CH_NAMES[7] = "8";
     CH_PINS[7] = "test_so8";
     CH_NAMES[8] = "9";
     CH_PINS[8] = "test_so9";
     CH_NAMES[9] = "10";
     CH_PINS[9] = "test_so10";
     CH_NAMES[10] = "11";
     CH_PINS[10] = "test_so11";
     CH_NAMES[11] = "12";
     CH_PINS[11] = "test_so12";
     CH_NAMES[12] = "13";
     CH_PINS[12] = "test_so13";
     CH_NAMES[13] = "14";
     CH_PINS[13] = "test_so14";
     CH_NAMES[14] = "15";
     CH_PINS[14] = "test_so15";
     CH_NAMES[15] = "16";
     CH_PINS[15] = "test_so16";
     CH_NAMES[16] = "17";
     CH_PINS[16] = "test_so17";
     CH_NAMES[17] = "18";
     CH_PINS[17] = "test_so18";
     CH_NAMES[18] = "19";
     CH_PINS[18] = "test_so19";
     CH_NAMES[19] = "20";
     CH_PINS[19] = "test_so20";
     CH_NAMES[20] = "21";
     CH_PINS[20] = "test_so21";
     CH_NAMES[21] = "22";
     CH_PINS[21] = "test_so22";
     CH_NAMES[22] = "23";
     CH_PINS[22] = "test_so23";
     CH_NAMES[23] = "24";
     CH_PINS[23] = "test_so24";
     CH_NAMES[24] = "25";
     CH_PINS[24] = "test_so25";
     CH_NAMES[25] = "26";
     CH_PINS[25] = "test_so26";
     CH_NAMES[26] = "27";
     CH_PINS[26] = "test_so27";
     CH_NAMES[27] = "28";
     CH_PINS[27] = "test_so28";
     CH_NAMES[28] = "29";
     CH_PINS[28] = "test_so29";
     CH_NAMES[29] = "30";
     CH_PINS[29] = "test_so30";
     CH_NAMES[30] = "31";
     CH_PINS[30] = "test_so31";
     CH_NAMES[31] = "32";
     CH_PINS[31] = "test_so32";
     CH_NAMES[32] = "33";
     CH_PINS[32] = "test_so33";
     CH_NAMES[33] = "34";
     CH_PINS[33] = "test_so34";
     CH_NAMES[34] = "35";
     CH_PINS[34] = "test_so35";
     CH_NAMES[35] = "36";
     CH_PINS[35] = "test_so36";
     CH_NAMES[36] = "37";
     CH_PINS[36] = "test_so37";
     CH_NAMES[37] = "38";
     CH_PINS[37] = "test_so38";
     CH_NAMES[38] = "39";
     CH_PINS[38] = "test_so39";
     CH_NAMES[39] = "40";
     CH_PINS[39] = "test_so40";
     CH_NAMES[40] = "41";
     CH_PINS[40] = "test_so41";
     CH_NAMES[41] = "42";
     CH_PINS[41] = "test_so42";
     CH_NAMES[42] = "43";
     CH_PINS[42] = "test_so43";
     CH_NAMES[43] = "44";
     CH_PINS[43] = "test_so44";
     CH_NAMES[44] = "45";
     CH_PINS[44] = "test_so45";
     CH_NAMES[45] = "46";
     CH_PINS[45] = "test_so46";
     CH_NAMES[46] = "47";
     CH_PINS[46] = "test_so47";
     SC_NAMES[0] = "DU.dm.\memory_reg[0][5] ";     SC_NAMES[1] = "DU.dm.\memory_reg[0][4] "; SC_NAMES[2] = "DU.dm.\memory_reg[0][3] "; SC_NAMES[3] = "DU.dm.\memory_reg[0][2] "; SC_NAMES[4] = "DU.dm.\memory_reg[0][1] "; SC_NAMES[5] = "DU.dm.\memory_reg[0][0] "; SC_NAMES[6] = "snps_clk_chain_0.\U_shftreg_0/ff_0/q_reg "; SC_NAMES[7] = "snps_clk_chain_0.\U_shftreg_0/ff_1/q_reg "; SC_NAMES[8] = "snps_clk_chain_0.\U_shftreg_0/ff_2/q_reg "; SC_NAMES[9] = "snps_clk_chain_0.\U_shftreg_0/ff_3/q_reg "; SC_NAMES[10] = "-"; SC_NAMES[11] = "-"; SC_NAMES[12] = "DU.dm.\memory_reg[0][11] "; SC_NAMES[13] = "DU.dm.\memory_reg[0][10] "; SC_NAMES[14] = "DU.dm.\memory_reg[0][9] "; SC_NAMES[15] = "DU.dm.\memory_reg[0][8] "; SC_NAMES[16] = "DU.dm.\memory_reg[0][7] "; SC_NAMES[17] = "DU.dm.\memory_reg[0][6] "; SC_NAMES[18] = "DU.dm.\memory_reg[1][1] "; SC_NAMES[19] = "DU.dm.\memory_reg[1][0] "; SC_NAMES[20] = "DU.dm.\memory_reg[0][15] "; SC_NAMES[21] = "DU.dm.\memory_reg[0][14] "; SC_NAMES[22] = "DU.dm.\memory_reg[0][13] "; SC_NAMES[23] = "DU.dm.\memory_reg[0][12] "; SC_NAMES[24] = "DU.dm.\memory_reg[1][7] "; SC_NAMES[25] = "DU.dm.\memory_reg[1][6] "; SC_NAMES[26] = "DU.dm.\memory_reg[1][5] "; SC_NAMES[27] = "DU.dm.\memory_reg[1][4] "; SC_NAMES[28] = "DU.dm.\memory_reg[1][3] "; SC_NAMES[29] = "DU.dm.\memory_reg[1][2] "; SC_NAMES[30] = "DU.dm.\memory_reg[1][13] "; SC_NAMES[31] = "DU.dm.\memory_reg[1][12] "; SC_NAMES[32] = "DU.dm.\memory_reg[1][11] "; SC_NAMES[33] = "DU.dm.\memory_reg[1][10] "; SC_NAMES[34] = "DU.dm.\memory_reg[1][9] "; SC_NAMES[35] = "DU.dm.\memory_reg[1][8] "; SC_NAMES[36] = "DU.dm.\memory_reg[2][3] "; SC_NAMES[37] = "DU.dm.\memory_reg[2][2] "; SC_NAMES[38] = "DU.dm.\memory_reg[2][1] "; SC_NAMES[39] = "DU.dm.\memory_reg[2][0] "; SC_NAMES[40] = "DU.dm.\memory_reg[1][15] "; SC_NAMES[41] = "DU.dm.\memory_reg[1][14] "; SC_NAMES[42] = "DU.dm.\memory_reg[2][9] "; SC_NAMES[43] = "DU.dm.\memory_reg[2][8] "; SC_NAMES[44] = "DU.dm.\memory_reg[2][7] "; SC_NAMES[45] = "DU.dm.\memory_reg[2][6] "; SC_NAMES[46] = "DU.dm.\memory_reg[2][5] "; SC_NAMES[47] = "DU.dm.\memory_reg[2][4] ";
     SC_NAMES[48] = "DU.dm.\memory_reg[2][15] "; SC_NAMES[49] = "DU.dm.\memory_reg[2][14] "; SC_NAMES[50] = "DU.dm.\memory_reg[2][13] "; SC_NAMES[51] = "DU.dm.\memory_reg[2][12] "; SC_NAMES[52] = "DU.dm.\memory_reg[2][11] "; SC_NAMES[53] = "DU.dm.\memory_reg[2][10] "; SC_NAMES[54] = "DU.dm.\memory_reg[3][5] "; SC_NAMES[55] = "DU.dm.\memory_reg[3][4] "; SC_NAMES[56] = "DU.dm.\memory_reg[3][3] "; SC_NAMES[57] = "DU.dm.\memory_reg[3][2] "; SC_NAMES[58] = "DU.dm.\memory_reg[3][1] "; SC_NAMES[59] = "DU.dm.\memory_reg[3][0] "; SC_NAMES[60] = "DU.dm.\memory_reg[3][11] "; SC_NAMES[61] = "DU.dm.\memory_reg[3][10] "; SC_NAMES[62] = "DU.dm.\memory_reg[3][9] "; SC_NAMES[63] = "DU.dm.\memory_reg[3][8] "; SC_NAMES[64] = "DU.dm.\memory_reg[3][7] "; SC_NAMES[65] = "DU.dm.\memory_reg[3][6] "; SC_NAMES[66] = "DU.dm.\memory_reg[4][1] "; SC_NAMES[67] = "DU.dm.\memory_reg[4][0] "; SC_NAMES[68] = "DU.dm.\memory_reg[3][15] "; SC_NAMES[69] = "DU.dm.\memory_reg[3][14] "; SC_NAMES[70] = "DU.dm.\memory_reg[3][13] "; SC_NAMES[71] = "DU.dm.\memory_reg[3][12] "; SC_NAMES[72] = "DU.dm.\memory_reg[4][7] "; SC_NAMES[73] = "DU.dm.\memory_reg[4][6] "; SC_NAMES[74] = "DU.dm.\memory_reg[4][5] "; SC_NAMES[75] = "DU.dm.\memory_reg[4][4] "; SC_NAMES[76] = "DU.dm.\memory_reg[4][3] "; SC_NAMES[77] = "DU.dm.\memory_reg[4][2] "; SC_NAMES[78] = "DU.dm.\memory_reg[4][13] "; SC_NAMES[79] = "DU.dm.\memory_reg[4][12] "; SC_NAMES[80] = "DU.dm.\memory_reg[4][11] "; SC_NAMES[81] = "DU.dm.\memory_reg[4][10] "; SC_NAMES[82] = "DU.dm.\memory_reg[4][9] "; SC_NAMES[83] = "DU.dm.\memory_reg[4][8] "; SC_NAMES[84] = "DU.dm.\memory_reg[5][3] "; SC_NAMES[85] = "DU.dm.\memory_reg[5][2] "; SC_NAMES[86] = "DU.dm.\memory_reg[5][1] "; SC_NAMES[87] = "DU.dm.\memory_reg[5][0] "; SC_NAMES[88] = "DU.dm.\memory_reg[4][15] "; SC_NAMES[89] = "DU.dm.\memory_reg[4][14] "; SC_NAMES[90] = "DU.dm.\memory_reg[5][9] "; SC_NAMES[91] = "DU.dm.\memory_reg[5][8] "; SC_NAMES[92] = "DU.dm.\memory_reg[5][7] "; SC_NAMES[93] = "DU.dm.\memory_reg[5][6] "; SC_NAMES[94] = "DU.dm.\memory_reg[5][5] ";
     SC_NAMES[95] = "DU.dm.\memory_reg[5][4] "; SC_NAMES[96] = "DU.dm.\memory_reg[5][15] "; SC_NAMES[97] = "DU.dm.\memory_reg[5][14] "; SC_NAMES[98] = "DU.dm.\memory_reg[5][13] "; SC_NAMES[99] = "DU.dm.\memory_reg[5][12] "; SC_NAMES[100] = "DU.dm.\memory_reg[5][11] "; SC_NAMES[101] = "DU.dm.\memory_reg[5][10] "; SC_NAMES[102] = "DU.dm.\memory_reg[6][5] "; SC_NAMES[103] = "DU.dm.\memory_reg[6][4] "; SC_NAMES[104] = "DU.dm.\memory_reg[6][3] "; SC_NAMES[105] = "DU.dm.\memory_reg[6][2] "; SC_NAMES[106] = "DU.dm.\memory_reg[6][1] "; SC_NAMES[107] = "DU.dm.\memory_reg[6][0] "; SC_NAMES[108] = "DU.dm.\memory_reg[6][11] "; SC_NAMES[109] = "DU.dm.\memory_reg[6][10] "; SC_NAMES[110] = "DU.dm.\memory_reg[6][9] "; SC_NAMES[111] = "DU.dm.\memory_reg[6][8] "; SC_NAMES[112] = "DU.dm.\memory_reg[6][7] "; SC_NAMES[113] = "DU.dm.\memory_reg[6][6] "; SC_NAMES[114] = "DU.dm.\memory_reg[7][1] "; SC_NAMES[115] = "DU.dm.\memory_reg[7][0] "; SC_NAMES[116] = "DU.dm.\memory_reg[6][15] "; SC_NAMES[117] = "DU.dm.\memory_reg[6][14] "; SC_NAMES[118] = "DU.dm.\memory_reg[6][13] "; SC_NAMES[119] = "DU.dm.\memory_reg[6][12] "; SC_NAMES[120] = "DU.dm.\memory_reg[7][7] "; SC_NAMES[121] = "DU.dm.\memory_reg[7][6] "; SC_NAMES[122] = "DU.dm.\memory_reg[7][5] "; SC_NAMES[123] = "DU.dm.\memory_reg[7][4] "; SC_NAMES[124] = "DU.dm.\memory_reg[7][3] "; SC_NAMES[125] = "DU.dm.\memory_reg[7][2] "; SC_NAMES[126] = "DU.dm.\memory_reg[7][13] "; SC_NAMES[127] = "DU.dm.\memory_reg[7][12] "; SC_NAMES[128] = "DU.dm.\memory_reg[7][11] "; SC_NAMES[129] = "DU.dm.\memory_reg[7][10] "; SC_NAMES[130] = "DU.dm.\memory_reg[7][9] "; SC_NAMES[131] = "DU.dm.\memory_reg[7][8] "; SC_NAMES[132] = "DU.\pc_current_reg[3] "; SC_NAMES[133] = "DU.\pc_current_reg[2] "; SC_NAMES[134] = "DU.\pc_current_reg[1] "; SC_NAMES[135] = "DU.\pc_current_reg[0] "; SC_NAMES[136] = "DU.dm.\memory_reg[7][15] "; SC_NAMES[137] = "DU.dm.\memory_reg[7][14] "; SC_NAMES[138] = "DU.\pc_current_reg[9] "; SC_NAMES[139] = "DU.\pc_current_reg[8] "; SC_NAMES[140] = "DU.\pc_current_reg[7] "; SC_NAMES[141] = "DU.\pc_current_reg[6] ";
     SC_NAMES[142] = "DU.\pc_current_reg[5] "; SC_NAMES[143] = "DU.\pc_current_reg[4] "; SC_NAMES[144] = "DU.\pc_current_reg[15] "; SC_NAMES[145] = "DU.\pc_current_reg[14] "; SC_NAMES[146] = "DU.\pc_current_reg[13] "; SC_NAMES[147] = "DU.\pc_current_reg[12] "; SC_NAMES[148] = "DU.\pc_current_reg[11] "; SC_NAMES[149] = "DU.\pc_current_reg[10] "; SC_NAMES[150] = "DU.reg_file.\reg_array_reg[0][5] "; SC_NAMES[151] = "DU.reg_file.\reg_array_reg[0][4] "; SC_NAMES[152] = "DU.reg_file.\reg_array_reg[0][3] "; SC_NAMES[153] = "DU.reg_file.\reg_array_reg[0][2] "; SC_NAMES[154] = "DU.reg_file.\reg_array_reg[0][1] "; SC_NAMES[155] = "DU.reg_file.\reg_array_reg[0][0] "; SC_NAMES[156] = "DU.reg_file.\reg_array_reg[0][11] "; SC_NAMES[157] = "DU.reg_file.\reg_array_reg[0][10] "; SC_NAMES[158] = "DU.reg_file.\reg_array_reg[0][9] "; SC_NAMES[159] = "DU.reg_file.\reg_array_reg[0][8] "; SC_NAMES[160] = "DU.reg_file.\reg_array_reg[0][7] "; SC_NAMES[161] = "DU.reg_file.\reg_array_reg[0][6] "; SC_NAMES[162] = "DU.reg_file.\reg_array_reg[1][1] "; SC_NAMES[163] = "DU.reg_file.\reg_array_reg[1][0] "; SC_NAMES[164] = "DU.reg_file.\reg_array_reg[0][15] "; SC_NAMES[165] = "DU.reg_file.\reg_array_reg[0][14] "; SC_NAMES[166] = "DU.reg_file.\reg_array_reg[0][13] "; SC_NAMES[167] = "DU.reg_file.\reg_array_reg[0][12] "; SC_NAMES[168] = "DU.reg_file.\reg_array_reg[1][7] "; SC_NAMES[169] = "DU.reg_file.\reg_array_reg[1][6] "; SC_NAMES[170] = "DU.reg_file.\reg_array_reg[1][5] "; SC_NAMES[171] = "DU.reg_file.\reg_array_reg[1][4] "; SC_NAMES[172] = "DU.reg_file.\reg_array_reg[1][3] "; SC_NAMES[173] = "DU.reg_file.\reg_array_reg[1][2] "; SC_NAMES[174] = "DU.reg_file.\reg_array_reg[1][13] "; SC_NAMES[175] = "DU.reg_file.\reg_array_reg[1][12] "; SC_NAMES[176] = "DU.reg_file.\reg_array_reg[1][11] "; SC_NAMES[177] = "DU.reg_file.\reg_array_reg[1][10] "; SC_NAMES[178] = "DU.reg_file.\reg_array_reg[1][9] "; SC_NAMES[179] = "DU.reg_file.\reg_array_reg[1][8] "; SC_NAMES[180] = "DU.reg_file.\reg_array_reg[2][3] "; SC_NAMES[181] = "DU.reg_file.\reg_array_reg[2][2] "; SC_NAMES[182] = "DU.reg_file.\reg_array_reg[2][1] "; SC_NAMES[183] = "DU.reg_file.\reg_array_reg[2][0] "; SC_NAMES[184] = "DU.reg_file.\reg_array_reg[1][15] "; SC_NAMES[185] = "DU.reg_file.\reg_array_reg[1][14] "; SC_NAMES[186] = "DU.reg_file.\reg_array_reg[2][9] "; SC_NAMES[187] = "DU.reg_file.\reg_array_reg[2][8] "; SC_NAMES[188] = "DU.reg_file.\reg_array_reg[2][7] ";
     SC_NAMES[189] = "DU.reg_file.\reg_array_reg[2][6] "; SC_NAMES[190] = "DU.reg_file.\reg_array_reg[2][5] "; SC_NAMES[191] = "DU.reg_file.\reg_array_reg[2][4] "; SC_NAMES[192] = "DU.reg_file.\reg_array_reg[2][15] "; SC_NAMES[193] = "DU.reg_file.\reg_array_reg[2][14] "; SC_NAMES[194] = "DU.reg_file.\reg_array_reg[2][13] "; SC_NAMES[195] = "DU.reg_file.\reg_array_reg[2][12] "; SC_NAMES[196] = "DU.reg_file.\reg_array_reg[2][11] "; SC_NAMES[197] = "DU.reg_file.\reg_array_reg[2][10] "; SC_NAMES[198] = "DU.reg_file.\reg_array_reg[3][5] "; SC_NAMES[199] = "DU.reg_file.\reg_array_reg[3][4] "; SC_NAMES[200] = "DU.reg_file.\reg_array_reg[3][3] "; SC_NAMES[201] = "DU.reg_file.\reg_array_reg[3][2] "; SC_NAMES[202] = "DU.reg_file.\reg_array_reg[3][1] "; SC_NAMES[203] = "DU.reg_file.\reg_array_reg[3][0] "; SC_NAMES[204] = "DU.reg_file.\reg_array_reg[3][11] "; SC_NAMES[205] = "DU.reg_file.\reg_array_reg[3][10] "; SC_NAMES[206] = "DU.reg_file.\reg_array_reg[3][9] "; SC_NAMES[207] = "DU.reg_file.\reg_array_reg[3][8] "; SC_NAMES[208] = "DU.reg_file.\reg_array_reg[3][7] "; SC_NAMES[209] = "DU.reg_file.\reg_array_reg[3][6] "; SC_NAMES[210] = "DU.reg_file.\reg_array_reg[4][1] "; SC_NAMES[211] = "DU.reg_file.\reg_array_reg[4][0] "; SC_NAMES[212] = "DU.reg_file.\reg_array_reg[3][15] "; SC_NAMES[213] = "DU.reg_file.\reg_array_reg[3][14] "; SC_NAMES[214] = "DU.reg_file.\reg_array_reg[3][13] "; SC_NAMES[215] = "DU.reg_file.\reg_array_reg[3][12] "; SC_NAMES[216] = "DU.reg_file.\reg_array_reg[4][7] "; SC_NAMES[217] = "DU.reg_file.\reg_array_reg[4][6] "; SC_NAMES[218] = "DU.reg_file.\reg_array_reg[4][5] "; SC_NAMES[219] = "DU.reg_file.\reg_array_reg[4][4] "; SC_NAMES[220] = "DU.reg_file.\reg_array_reg[4][3] "; SC_NAMES[221] = "DU.reg_file.\reg_array_reg[4][2] "; SC_NAMES[222] = "DU.reg_file.\reg_array_reg[4][13] "; SC_NAMES[223] = "DU.reg_file.\reg_array_reg[4][12] "; SC_NAMES[224] = "DU.reg_file.\reg_array_reg[4][11] "; SC_NAMES[225] = "DU.reg_file.\reg_array_reg[4][10] "; SC_NAMES[226] = "DU.reg_file.\reg_array_reg[4][9] "; SC_NAMES[227] = "DU.reg_file.\reg_array_reg[4][8] "; SC_NAMES[228] = "DU.reg_file.\reg_array_reg[5][3] "; SC_NAMES[229] = "DU.reg_file.\reg_array_reg[5][2] "; SC_NAMES[230] = "DU.reg_file.\reg_array_reg[5][1] "; SC_NAMES[231] = "DU.reg_file.\reg_array_reg[5][0] "; SC_NAMES[232] = "DU.reg_file.\reg_array_reg[4][15] "; SC_NAMES[233] = "DU.reg_file.\reg_array_reg[4][14] "; SC_NAMES[234] = "DU.reg_file.\reg_array_reg[5][9] "; SC_NAMES[235] = "DU.reg_file.\reg_array_reg[5][8] ";
     SC_NAMES[236] = "DU.reg_file.\reg_array_reg[5][7] "; SC_NAMES[237] = "DU.reg_file.\reg_array_reg[5][6] "; SC_NAMES[238] = "DU.reg_file.\reg_array_reg[5][5] "; SC_NAMES[239] = "DU.reg_file.\reg_array_reg[5][4] "; SC_NAMES[240] = "DU.reg_file.\reg_array_reg[5][15] "; SC_NAMES[241] = "DU.reg_file.\reg_array_reg[5][14] "; SC_NAMES[242] = "DU.reg_file.\reg_array_reg[5][13] "; SC_NAMES[243] = "DU.reg_file.\reg_array_reg[5][12] "; SC_NAMES[244] = "DU.reg_file.\reg_array_reg[5][11] "; SC_NAMES[245] = "DU.reg_file.\reg_array_reg[5][10] "; SC_NAMES[246] = "DU.reg_file.\reg_array_reg[6][5] "; SC_NAMES[247] = "DU.reg_file.\reg_array_reg[6][4] "; SC_NAMES[248] = "DU.reg_file.\reg_array_reg[6][3] "; SC_NAMES[249] = "DU.reg_file.\reg_array_reg[6][2] "; SC_NAMES[250] = "DU.reg_file.\reg_array_reg[6][1] "; SC_NAMES[251] = "DU.reg_file.\reg_array_reg[6][0] "; SC_NAMES[252] = "DU.reg_file.\reg_array_reg[6][11] "; SC_NAMES[253] = "DU.reg_file.\reg_array_reg[6][10] "; SC_NAMES[254] = "DU.reg_file.\reg_array_reg[6][9] "; SC_NAMES[255] = "DU.reg_file.\reg_array_reg[6][8] "; SC_NAMES[256] = "DU.reg_file.\reg_array_reg[6][7] "; SC_NAMES[257] = "DU.reg_file.\reg_array_reg[6][6] "; SC_NAMES[258] = "DU.reg_file.\reg_array_reg[7][0] "; SC_NAMES[259] = "DU.reg_file.\reg_array_reg[6][15] "; SC_NAMES[260] = "DU.reg_file.\reg_array_reg[6][14] "; SC_NAMES[261] = "DU.reg_file.\reg_array_reg[6][13] "; SC_NAMES[262] = "DU.reg_file.\reg_array_reg[6][12] "; SC_NAMES[263] = "-"; SC_NAMES[264] = "DU.reg_file.\reg_array_reg[7][5] "; SC_NAMES[265] = "DU.reg_file.\reg_array_reg[7][4] "; SC_NAMES[266] = "DU.reg_file.\reg_array_reg[7][3] "; SC_NAMES[267] = "DU.reg_file.\reg_array_reg[7][2] "; SC_NAMES[268] = "DU.reg_file.\reg_array_reg[7][1] "; SC_NAMES[269] = "-"; SC_NAMES[270] = "DU.reg_file.\reg_array_reg[7][10] "; SC_NAMES[271] = "DU.reg_file.\reg_array_reg[7][9] "; SC_NAMES[272] = "DU.reg_file.\reg_array_reg[7][8] "; SC_NAMES[273] = "DU.reg_file.\reg_array_reg[7][7] "; SC_NAMES[274] = "DU.reg_file.\reg_array_reg[7][6] "; SC_NAMES[275] = "-"; SC_NAMES[276] = "DU.reg_file.\reg_array_reg[7][15] "; SC_NAMES[277] = "DU.reg_file.\reg_array_reg[7][14] "; SC_NAMES[278] = "DU.reg_file.\reg_array_reg[7][13] "; SC_NAMES[279] = "DU.reg_file.\reg_array_reg[7][12] "; SC_NAMES[280] = "DU.reg_file.\reg_array_reg[7][11] "; SC_NAMES[281] = "-";     CH_OUTINV[0] = 6'b010101;
     CH_INPINV[0] = 6'b101010;
     CT_OUTINV[0] = 6'b011111;
     CH_OUTINV[1] = 6'b000000;
     CH_INPINV[1] = 6'b000000;
     CT_OUTINV[1] = 6'b000000;
     CH_OUTINV[2] = 6'b010101;
     CH_INPINV[2] = 6'b101010;
     CT_OUTINV[2] = 6'b011111;
     CH_OUTINV[3] = 6'b010101;
     CH_INPINV[3] = 6'b101010;
     CT_OUTINV[3] = 6'b011111;
     CH_OUTINV[4] = 6'b101010;
     CH_INPINV[4] = 6'b101010;
     CT_OUTINV[4] = 6'b111111;
     CH_OUTINV[5] = 6'b101010;
     CH_INPINV[5] = 6'b101010;
     CT_OUTINV[5] = 6'b111111;
     CH_OUTINV[6] = 6'b101010;
     CH_INPINV[6] = 6'b101010;
     CT_OUTINV[6] = 6'b111111;
     CH_OUTINV[7] = 6'b101010;
     CH_INPINV[7] = 6'b101010;
     CT_OUTINV[7] = 6'b111111;
     CH_OUTINV[8] = 6'b101010;
     CH_INPINV[8] = 6'b101010;
     CT_OUTINV[8] = 6'b111111;
     CH_OUTINV[9] = 6'b101010;
     CH_INPINV[9] = 6'b101010;
     CT_OUTINV[9] = 6'b111111;
     CH_OUTINV[10] = 6'b101010;
     CH_INPINV[10] = 6'b101010;
     CT_OUTINV[10] = 6'b111111;
     CH_OUTINV[11] = 6'b101010;
     CH_INPINV[11] = 6'b101010;
     CT_OUTINV[11] = 6'b111111;
     CH_OUTINV[12] = 6'b101010;
     CH_INPINV[12] = 6'b101010;
     CT_OUTINV[12] = 6'b111111;
     CH_OUTINV[13] = 6'b101010;
     CH_INPINV[13] = 6'b101010;
     CT_OUTINV[13] = 6'b111111;
     CH_OUTINV[14] = 6'b101010;
     CH_INPINV[14] = 6'b101010;
     CT_OUTINV[14] = 6'b111111;
     CH_OUTINV[15] = 6'b101010;
     CH_INPINV[15] = 6'b101010;
     CT_OUTINV[15] = 6'b111111;
     CH_OUTINV[16] = 6'b101010;
     CH_INPINV[16] = 6'b101010;
     CT_OUTINV[16] = 6'b111111;
     CH_OUTINV[17] = 6'b101010;
     CH_INPINV[17] = 6'b101010;
     CT_OUTINV[17] = 6'b111111;
     CH_OUTINV[18] = 6'b101010;
     CH_INPINV[18] = 6'b101010;
     CT_OUTINV[18] = 6'b111111;
     CH_OUTINV[19] = 6'b101010;
     CH_INPINV[19] = 6'b101010;
     CT_OUTINV[19] = 6'b111111;
     CH_OUTINV[20] = 6'b101010;
     CH_INPINV[20] = 6'b101010;
     CT_OUTINV[20] = 6'b111111;
     CH_OUTINV[21] = 6'b101010;
     CH_INPINV[21] = 6'b101010;
     CT_OUTINV[21] = 6'b111111;
     CH_OUTINV[22] = 6'b101010;
     CH_INPINV[22] = 6'b101010;
     CT_OUTINV[22] = 6'b111111;
     CH_OUTINV[23] = 6'b101010;
     CH_INPINV[23] = 6'b101010;
     CT_OUTINV[23] = 6'b111111;
     CH_OUTINV[24] = 6'b101010;
     CH_INPINV[24] = 6'b101010;
     CT_OUTINV[24] = 6'b111111;
     CH_OUTINV[25] = 6'b000101;
     CH_INPINV[25] = 6'b111010;
     CT_OUTINV[25] = 6'b000111;
     CH_OUTINV[26] = 6'b000000;
     CH_INPINV[26] = 6'b000000;
     CT_OUTINV[26] = 6'b000000;
     CH_OUTINV[27] = 6'b100000;
     CH_INPINV[27] = 6'b100000;
     CT_OUTINV[27] = 6'b110000;
     CH_OUTINV[28] = 6'b101010;
     CH_INPINV[28] = 6'b101010;
     CT_OUTINV[28] = 6'b111111;
     CH_OUTINV[29] = 6'b101010;
     CH_INPINV[29] = 6'b101010;
     CT_OUTINV[29] = 6'b111111;
     CH_OUTINV[30] = 6'b101010;
     CH_INPINV[30] = 6'b101010;
     CT_OUTINV[30] = 6'b111111;
     CH_OUTINV[31] = 6'b101010;
     CH_INPINV[31] = 6'b101010;
     CT_OUTINV[31] = 6'b111111;
     CH_OUTINV[32] = 6'b101010;
     CH_INPINV[32] = 6'b101010;
     CT_OUTINV[32] = 6'b111111;
     CH_OUTINV[33] = 6'b101010;
     CH_INPINV[33] = 6'b101010;
     CT_OUTINV[33] = 6'b111111;
     CH_OUTINV[34] = 6'b101010;
     CH_INPINV[34] = 6'b101010;
     CT_OUTINV[34] = 6'b111111;
     CH_OUTINV[35] = 6'b101010;
     CH_INPINV[35] = 6'b101010;
     CT_OUTINV[35] = 6'b111111;
     CH_OUTINV[36] = 6'b101010;
     CH_INPINV[36] = 6'b101010;
     CT_OUTINV[36] = 6'b111111;
     CH_OUTINV[37] = 6'b101010;
     CH_INPINV[37] = 6'b101010;
     CT_OUTINV[37] = 6'b111111;
     CH_OUTINV[38] = 6'b101010;
     CH_INPINV[38] = 6'b101010;
     CT_OUTINV[38] = 6'b111111;
     CH_OUTINV[39] = 6'b101010;
     CH_INPINV[39] = 6'b101010;
     CT_OUTINV[39] = 6'b111111;
     CH_OUTINV[40] = 6'b101010;
     CH_INPINV[40] = 6'b101010;
     CT_OUTINV[40] = 6'b111111;
     CH_OUTINV[41] = 6'b101010;
     CH_INPINV[41] = 6'b101010;
     CT_OUTINV[41] = 6'b111111;
     CH_OUTINV[42] = 6'b101010;
     CH_INPINV[42] = 6'b101010;
     CT_OUTINV[42] = 6'b111111;
     CH_OUTINV[43] = 6'b101010;
     CH_INPINV[43] = 6'b001010;
     CT_OUTINV[43] = 6'b111110;
     CH_OUTINV[44] = 6'b101010;
     CH_INPINV[44] = 6'b001010;
     CT_OUTINV[44] = 6'b111110;
     CH_OUTINV[45] = 6'b101010;
     CH_INPINV[45] = 6'b001010;
     CT_OUTINV[45] = 6'b111110;
     CH_OUTINV[46] = 6'b101010;
     CH_INPINV[46] = 6'b001010;
     CT_OUTINV[46] = 6'b111110;

     diagm = 0;
     diag_file = "";

     `ifdef tmax_diag 
       diagm = `tmax_diag;
     `endif

     -> start_part;
     @(end_part) #0;
     $finish(0);

   end

 endmodule
